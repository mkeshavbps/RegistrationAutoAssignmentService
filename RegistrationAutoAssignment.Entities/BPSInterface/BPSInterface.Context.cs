//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegistrationAutoAssignment.Entities.BPSInterface
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.Common;

    public partial class BPSInterfaceEntities : DbContext
    {
        private DbConnection cntxDbConnect;

        public BPSInterfaceEntities()
            : base("name=BPSInterfaceEntities")
        {
        }

        public BPSInterfaceEntities(DbConnection cntxDbConnect)
        {
            this.cntxDbConnect = cntxDbConnect;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<RoundDetail> RoundDetails { get; set; }
        public virtual DbSet<School> Schools { get; set; }
        public virtual DbSet<SchoolTier> SchoolTiers { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<usrUserSession> usrUserSessions { get; set; }
        public virtual DbSet<AddressFile> AddressFiles { get; set; }
        public virtual DbSet<AddressFileClosestFacility> AddressFileClosestFacilities { get; set; }
        public virtual DbSet<SchoolAcademicProgram> SchoolAcademicPrograms { get; set; }
        public virtual DbSet<SchoolLanguage> SchoolLanguages { get; set; }
        public virtual DbSet<SubProgram> SubPrograms { get; set; }
        public virtual DbSet<xmlTPassRule> xmlTPassRules { get; set; }
        public virtual DbSet<LogGetSchoolInterestList> LogGetSchoolInterestLists { get; set; }
        public virtual DbSet<LogValidSchoolChoice> LogValidSchoolChoices { get; set; }
        public virtual DbSet<LogWebServiceCall> LogWebServiceCalls { get; set; }
        public virtual DbSet<SchoolCapacity> SchoolCapacities { get; set; }
        public virtual DbSet<SchoolChoicesForStudentCallInfo> SchoolChoicesForStudentCallInfoes { get; set; }
        public virtual DbSet<SchoolChoicesForStudentCallResult> SchoolChoicesForStudentCallResults { get; set; }
        public virtual DbSet<scrSchoolChoicesForStudentCallRank> scrSchoolChoicesForStudentCallRanks { get; set; }
        public virtual DbSet<StudentChoiceCase> StudentChoiceCases { get; set; }
        public virtual DbSet<StudentSchoolChoice> StudentSchoolChoices { get; set; }
        public virtual DbSet<vcsValidateChoice> vcsValidateChoices { get; set; }
        public virtual DbSet<SchoolHoursSimple> SchoolHoursSimples { get; set; }
        public virtual DbSet<SchoolLanguagesNew> SchoolLanguagesNews { get; set; }
        public virtual DbSet<AddressFileAttribute> AddressFileAttributes { get; set; }
        public virtual DbSet<Assignmentwalk> Assignmentwalks { get; set; }
        public virtual DbSet<ClosestFacilityAllResultsForMatch> ClosestFacilityAllResultsForMatches { get; set; }
        public virtual DbSet<GeoHzone> GeoHzones { get; set; }
        public virtual DbSet<GeoSchMatrix> GeoSchMatrices { get; set; }
        public virtual DbSet<NeighborhoodCode> NeighborhoodCodes { get; set; }
        public virtual DbSet<Number> Numbers { get; set; }
        public virtual DbSet<schoolAddressFiltered_temp> schoolAddressFiltered_temp { get; set; }
        public virtual DbSet<SchoolCalendar> SchoolCalendars { get; set; }
        public virtual DbSet<SchoolclusterAvailable> SchoolclusterAvailables { get; set; }
        public virtual DbSet<SchoolHour> SchoolHours { get; set; }
        public virtual DbSet<schoollocation> schoollocations { get; set; }
        public virtual DbSet<schoolphoto> schoolphotos { get; set; }
        public virtual DbSet<Schoolswithtier> Schoolswithtiers { get; set; }
        public virtual DbSet<SpedMiddleSchoolPathway> SpedMiddleSchoolPathways { get; set; }
        public virtual DbSet<StudentYearForXYSetup> StudentYearForXYSetups { get; set; }
        public virtual DbSet<tempTierV1> tempTierV1 { get; set; }
        public virtual DbSet<tempTierV2> tempTierV2 { get; set; }
        public virtual DbSet<walkeligible> walkeligibles { get; set; }
        public virtual DbSet<ziptable> ziptables { get; set; }
        public virtual DbSet<LogGetAddressMatch> LogGetAddressMatches { get; set; }
        public virtual DbSet<SchoolChoicesForStudentCallRank> SchoolChoicesForStudentCallRanks { get; set; }
        public virtual DbSet<SchoolInterestListForStudentCallInfo> SchoolInterestListForStudentCallInfoes { get; set; }
        public virtual DbSet<SchoolAward> SchoolAwards { get; set; }
        public virtual DbSet<SchoolCompleted> SchoolCompleteds { get; set; }
        public virtual DbSet<schooldescription> schooldescriptions { get; set; }
        public virtual DbSet<SchoolExtraCurricular> SchoolExtraCurriculars { get; set; }
        public virtual DbSet<SchoolFacility> SchoolFacilities { get; set; }
        public virtual DbSet<SchoolGrade> SchoolGrades { get; set; }
        public virtual DbSet<schoolpartner> schoolpartners { get; set; }
        public virtual DbSet<SchoolProfileLog> SchoolProfileLogs { get; set; }
        public virtual DbSet<SchoolProgram> SchoolPrograms { get; set; }
        public virtual DbSet<SchoolSport> SchoolSports { get; set; }
        public virtual DbSet<SchStudentSupport> SchStudentSupports { get; set; }
        public virtual DbSet<Security> Securities { get; set; }
        public virtual DbSet<AssignmentEligibleSchool> AssignmentEligibleSchools { get; set; }
        public virtual DbSet<CapacityFile> CapacityFiles { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<ContChoiceFormChoice> ContChoiceFormChoices { get; set; }
        public virtual DbSet<ContChoiceFormChoices05_FirstLangCorrection> ContChoiceFormChoices05_FirstLangCorrection { get; set; }
        public virtual DbSet<ContChoiceFormSibling> ContChoiceFormSiblings { get; set; }
        public virtual DbSet<DW_STUDENTSCHEDULE> DW_STUDENTSCHEDULE { get; set; }
        public virtual DbSet<PreviousYear_English_Math_Grade5_Transcript> PreviousYear_English_Math_Grade5_Transcript { get; set; }
        public virtual DbSet<SchSelection> SchSelections { get; set; }
        public virtual DbSet<SibApp> SibApps { get; set; }
        public virtual DbSet<StudentDir> StudentDirs { get; set; }
        public virtual DbSet<StudentELLSchedule> StudentELLSchedules { get; set; }
        public virtual DbSet<studentneedmonitor> studentneedmonitors { get; set; }
        public virtual DbSet<StudentYear> StudentYears { get; set; }
        public virtual DbSet<StudentYearFut> StudentYearFuts { get; set; }
        public virtual DbSet<StudentYearProgramFut> StudentYearProgramFuts { get; set; }
        public virtual DbSet<studentyearsch> studentyearsches { get; set; }
        public virtual DbSet<TransCodeDataFromAspen> TransCodeDataFromAspens { get; set; }
        public virtual DbSet<ViewContinousChoice> ViewContinousChoices { get; set; }
        public virtual DbSet<ViewOnlineChoice> ViewOnlineChoices { get; set; }
        public virtual DbSet<ViewSchool> ViewSchools { get; set; }
        public virtual DbSet<ViewSchoolCapacity> ViewSchoolCapacities { get; set; }
        public virtual DbSet<ViewSubProgramCode> ViewSubProgramCodes { get; set; }
        public virtual DbSet<ViewTPassRule> ViewTPassRules { get; set; }
        public virtual DbSet<ViewStudentSchoolChoice> ViewStudentSchoolChoices { get; set; }
        public virtual DbSet<GetSchoolDescriptionReport> GetSchoolDescriptionReports { get; set; }
        public virtual DbSet<ViewSchoolDescriptionsReport> ViewSchoolDescriptionsReports { get; set; }
        public virtual DbSet<ViewSchoolFacilitiesReport> ViewSchoolFacilitiesReports { get; set; }
        public virtual DbSet<ViewSchoolPartnersReport> ViewSchoolPartnersReports { get; set; }
        public virtual DbSet<ViewSchoolProfileUser> ViewSchoolProfileUsers { get; set; }
    
        [DbFunction("BPSInterfaceEntities", "splitstring")]
        public virtual IQueryable<splitstring_Result> splitstring(string stringToSplit)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<splitstring_Result>("[BPSInterfaceEntities].[splitstring](@stringToSplit)", stringToSplitParameter);
        }
    
        [DbFunction("BPSInterfaceEntities", "GetSchoolDistanceBasedonAddressID")]
        public virtual IQueryable<GetSchoolDistanceBasedonAddressID_Result> GetSchoolDistanceBasedonAddressID(Nullable<int> addressID, Nullable<double> addressX, Nullable<double> addressY, string gradeParam, Nullable<int> schYearInt, string stuCluster, string stuZipCode, string sEICode, string tierVersion)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var addressXParameter = addressX.HasValue ?
                new ObjectParameter("addressX", addressX) :
                new ObjectParameter("addressX", typeof(double));
    
            var addressYParameter = addressY.HasValue ?
                new ObjectParameter("addressY", addressY) :
                new ObjectParameter("addressY", typeof(double));
    
            var gradeParamParameter = gradeParam != null ?
                new ObjectParameter("GradeParam", gradeParam) :
                new ObjectParameter("GradeParam", typeof(string));
    
            var schYearIntParameter = schYearInt.HasValue ?
                new ObjectParameter("SchYearInt", schYearInt) :
                new ObjectParameter("SchYearInt", typeof(int));
    
            var stuClusterParameter = stuCluster != null ?
                new ObjectParameter("StuCluster", stuCluster) :
                new ObjectParameter("StuCluster", typeof(string));
    
            var stuZipCodeParameter = stuZipCode != null ?
                new ObjectParameter("StuZipCode", stuZipCode) :
                new ObjectParameter("StuZipCode", typeof(string));
    
            var sEICodeParameter = sEICode != null ?
                new ObjectParameter("SEICode", sEICode) :
                new ObjectParameter("SEICode", typeof(string));
    
            var tierVersionParameter = tierVersion != null ?
                new ObjectParameter("TierVersion", tierVersion) :
                new ObjectParameter("TierVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSchoolDistanceBasedonAddressID_Result>("[BPSInterfaceEntities].[GetSchoolDistanceBasedonAddressID](@AddressID, @addressX, @addressY, @GradeParam, @SchYearInt, @StuCluster, @StuZipCode, @SEICode, @TierVersion)", addressIDParameter, addressXParameter, addressYParameter, gradeParamParameter, schYearIntParameter, stuClusterParameter, stuZipCodeParameter, sEICodeParameter, tierVersionParameter);
        }
    
        [DbFunction("BPSInterfaceEntities", "GetSchoolEligibility")]
        public virtual IQueryable<GetSchoolEligibility_Result> GetSchoolEligibility(Nullable<double> addressX, Nullable<double> addressY, string geo, string gradeParam, Nullable<bool> isAWCParam, Nullable<bool> isBASParam, Nullable<bool> isBataOnly, Nullable<bool> isSife, Nullable<bool> isSubSepSped, Nullable<bool> isSubstantiallySeparateSped, Nullable<int> schYearInt, string sEICode, string sNCodeParam, string stuCluster, string stuCurrentSchool, string stuGuaranteeSchool2, string stuZone, string subSepProgCode, Nullable<bool> includeTwoWay)
        {
            var addressXParameter = addressX.HasValue ?
                new ObjectParameter("addressX", addressX) :
                new ObjectParameter("addressX", typeof(double));
    
            var addressYParameter = addressY.HasValue ?
                new ObjectParameter("addressY", addressY) :
                new ObjectParameter("addressY", typeof(double));
    
            var geoParameter = geo != null ?
                new ObjectParameter("Geo", geo) :
                new ObjectParameter("Geo", typeof(string));
    
            var gradeParamParameter = gradeParam != null ?
                new ObjectParameter("GradeParam", gradeParam) :
                new ObjectParameter("GradeParam", typeof(string));
    
            var isAWCParamParameter = isAWCParam.HasValue ?
                new ObjectParameter("IsAWCParam", isAWCParam) :
                new ObjectParameter("IsAWCParam", typeof(bool));
    
            var isBASParamParameter = isBASParam.HasValue ?
                new ObjectParameter("IsBASParam", isBASParam) :
                new ObjectParameter("IsBASParam", typeof(bool));
    
            var isBataOnlyParameter = isBataOnly.HasValue ?
                new ObjectParameter("IsBataOnly", isBataOnly) :
                new ObjectParameter("IsBataOnly", typeof(bool));
    
            var isSifeParameter = isSife.HasValue ?
                new ObjectParameter("IsSife", isSife) :
                new ObjectParameter("IsSife", typeof(bool));
    
            var isSubSepSpedParameter = isSubSepSped.HasValue ?
                new ObjectParameter("IsSubSepSped", isSubSepSped) :
                new ObjectParameter("IsSubSepSped", typeof(bool));
    
            var isSubstantiallySeparateSpedParameter = isSubstantiallySeparateSped.HasValue ?
                new ObjectParameter("IsSubstantiallySeparateSped", isSubstantiallySeparateSped) :
                new ObjectParameter("IsSubstantiallySeparateSped", typeof(bool));
    
            var schYearIntParameter = schYearInt.HasValue ?
                new ObjectParameter("SchYearInt", schYearInt) :
                new ObjectParameter("SchYearInt", typeof(int));
    
            var sEICodeParameter = sEICode != null ?
                new ObjectParameter("SEICode", sEICode) :
                new ObjectParameter("SEICode", typeof(string));
    
            var sNCodeParamParameter = sNCodeParam != null ?
                new ObjectParameter("SNCodeParam", sNCodeParam) :
                new ObjectParameter("SNCodeParam", typeof(string));
    
            var stuClusterParameter = stuCluster != null ?
                new ObjectParameter("StuCluster", stuCluster) :
                new ObjectParameter("StuCluster", typeof(string));
    
            var stuCurrentSchoolParameter = stuCurrentSchool != null ?
                new ObjectParameter("StuCurrentSchool", stuCurrentSchool) :
                new ObjectParameter("StuCurrentSchool", typeof(string));
    
            var stuGuaranteeSchool2Parameter = stuGuaranteeSchool2 != null ?
                new ObjectParameter("StuGuaranteeSchool2", stuGuaranteeSchool2) :
                new ObjectParameter("StuGuaranteeSchool2", typeof(string));
    
            var stuZoneParameter = stuZone != null ?
                new ObjectParameter("stuZone", stuZone) :
                new ObjectParameter("stuZone", typeof(string));
    
            var subSepProgCodeParameter = subSepProgCode != null ?
                new ObjectParameter("SubSepProgCode", subSepProgCode) :
                new ObjectParameter("SubSepProgCode", typeof(string));
    
            var includeTwoWayParameter = includeTwoWay.HasValue ?
                new ObjectParameter("includeTwoWay", includeTwoWay) :
                new ObjectParameter("includeTwoWay", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSchoolEligibility_Result>("[BPSInterfaceEntities].[GetSchoolEligibility](@addressX, @addressY, @Geo, @GradeParam, @IsAWCParam, @IsBASParam, @IsBataOnly, @IsSife, @IsSubSepSped, @IsSubstantiallySeparateSped, @SchYearInt, @SEICode, @SNCodeParam, @StuCluster, @StuCurrentSchool, @StuGuaranteeSchool2, @stuZone, @SubSepProgCode, @includeTwoWay)", addressXParameter, addressYParameter, geoParameter, gradeParamParameter, isAWCParamParameter, isBASParamParameter, isBataOnlyParameter, isSifeParameter, isSubSepSpedParameter, isSubstantiallySeparateSpedParameter, schYearIntParameter, sEICodeParameter, sNCodeParamParameter, stuClusterParameter, stuCurrentSchoolParameter, stuGuaranteeSchool2Parameter, stuZoneParameter, subSepProgCodeParameter, includeTwoWayParameter);
        }
    
        public virtual int AddSchoolLanguages(string sch, string schyear, string language)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSchoolLanguages", schParameter, schyearParameter, languageParameter);
        }
    
        public virtual int CleanUpSchema(string schemaName, string workTest)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var workTestParameter = workTest != null ?
                new ObjectParameter("WorkTest", workTest) :
                new ObjectParameter("WorkTest", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanUpSchema", schemaNameParameter, workTestParameter);
        }
    
        public virtual int DeleteSchoolLanguages(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchoolLanguages", idParameter);
        }
    
        public virtual ObjectResult<GetAddressesClosestFacility_Result> GetAddressesClosestFacility()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAddressesClosestFacility_Result>("GetAddressesClosestFacility");
        }
    
        public virtual ObjectResult<GetAddressesCOB_Result> GetAddressesCOB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAddressesCOB_Result>("GetAddressesCOB");
        }
    
        public virtual int GetCurrentSchoolYear(ObjectParameter currentSchoolYear)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCurrentSchoolYear", currentSchoolYear);
        }
    
        public virtual int GetCurrentStudentEnrollment(string studentNo, string schYear, ObjectParameter grade, ObjectParameter sNCode, ObjectParameter isAWC, ObjectParameter isBAS, ObjectParameter isExtendedDay, ObjectParameter isTwoWay, ObjectParameter isSpedIntegrated, ObjectParameter isMontessori, ObjectParameter isHybrid, ObjectParameter voced, ObjectParameter isMadisonPark, ObjectParameter lepStatus, ObjectParameter firstLang, ObjectParameter sifeStatus, ObjectParameter eLDLevel)
        {
            var studentNoParameter = studentNo != null ?
                new ObjectParameter("StudentNo", studentNo) :
                new ObjectParameter("StudentNo", typeof(string));
    
            var schYearParameter = schYear != null ?
                new ObjectParameter("SchYear", schYear) :
                new ObjectParameter("SchYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCurrentStudentEnrollment", studentNoParameter, schYearParameter, grade, sNCode, isAWC, isBAS, isExtendedDay, isTwoWay, isSpedIntegrated, isMontessori, isHybrid, voced, isMadisonPark, lepStatus, firstLang, sifeStatus, eLDLevel);
        }
    
        public virtual int GetFeederSchools(Nullable<int> schYearInt, string sch, ObjectParameter sibSchools, ObjectParameter numSibSch)
        {
            var schYearIntParameter = schYearInt.HasValue ?
                new ObjectParameter("SchYearInt", schYearInt) :
                new ObjectParameter("SchYearInt", typeof(int));
    
            var schParameter = sch != null ?
                new ObjectParameter("Sch", sch) :
                new ObjectParameter("Sch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFeederSchools", schYearIntParameter, schParameter, sibSchools, numSibSch);
        }
    
        public virtual ObjectResult<GetGoogleAddresses_Result> GetGoogleAddresses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGoogleAddresses_Result>("GetGoogleAddresses");
        }
    
        public virtual ObjectResult<GetInvalidAddresses_Result> GetInvalidAddresses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvalidAddresses_Result>("GetInvalidAddresses");
        }
    
        public virtual int GetLepStatus(string studentno, string lepStatusParam, ObjectParameter lepStatus)
        {
            var studentnoParameter = studentno != null ?
                new ObjectParameter("Studentno", studentno) :
                new ObjectParameter("Studentno", typeof(string));
    
            var lepStatusParamParameter = lepStatusParam != null ?
                new ObjectParameter("LepStatusParam", lepStatusParam) :
                new ObjectParameter("LepStatusParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLepStatus", studentnoParameter, lepStatusParamParameter, lepStatus);
        }
    
        public virtual int GetLongFromXY(Nullable<double> x, Nullable<double> y, ObjectParameter @long)
        {
            var xParameter = x.HasValue ?
                new ObjectParameter("X", x) :
                new ObjectParameter("X", typeof(double));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("Y", y) :
                new ObjectParameter("Y", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLongFromXY", xParameter, yParameter, @long);
        }
    
        public virtual ObjectResult<GetMySiblingsaspen_Result> GetMySiblingsaspen(string studentNo)
        {
            var studentNoParameter = studentNo != null ?
                new ObjectParameter("StudentNo", studentNo) :
                new ObjectParameter("StudentNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMySiblingsaspen_Result>("GetMySiblingsaspen", studentNoParameter);
        }
    
        public virtual int GetPathwayAssocation(string grade, ObjectParameter isFeederSameSch, Nullable<bool> isSpedCodeSubSep, Nullable<int> schYearInt, string spedCodeSubSepValue, string stuCluster, string stuCurrentProgramCode, ObjectParameter stuCurrentSchool, ObjectParameter stuGuaranteeProgCode1, ObjectParameter stuGuaranteeProgCode2, ObjectParameter stuGuaranteeSchool1, ObjectParameter stuGuaranteeSchool2)
        {
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var isSpedCodeSubSepParameter = isSpedCodeSubSep.HasValue ?
                new ObjectParameter("IsSpedCodeSubSep", isSpedCodeSubSep) :
                new ObjectParameter("IsSpedCodeSubSep", typeof(bool));
    
            var schYearIntParameter = schYearInt.HasValue ?
                new ObjectParameter("SchYearInt", schYearInt) :
                new ObjectParameter("SchYearInt", typeof(int));
    
            var spedCodeSubSepValueParameter = spedCodeSubSepValue != null ?
                new ObjectParameter("SpedCodeSubSepValue", spedCodeSubSepValue) :
                new ObjectParameter("SpedCodeSubSepValue", typeof(string));
    
            var stuClusterParameter = stuCluster != null ?
                new ObjectParameter("StuCluster", stuCluster) :
                new ObjectParameter("StuCluster", typeof(string));
    
            var stuCurrentProgramCodeParameter = stuCurrentProgramCode != null ?
                new ObjectParameter("StuCurrentProgramCode", stuCurrentProgramCode) :
                new ObjectParameter("StuCurrentProgramCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPathwayAssocation", gradeParameter, isFeederSameSch, isSpedCodeSubSepParameter, schYearIntParameter, spedCodeSubSepValueParameter, stuClusterParameter, stuCurrentProgramCodeParameter, stuCurrentSchool, stuGuaranteeProgCode1, stuGuaranteeProgCode2, stuGuaranteeSchool1, stuGuaranteeSchool2);
        }
    
        public virtual ObjectResult<GetSchoolClusterByAddressID_Result> GetSchoolClusterByAddressID(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolClusterByAddressID_Result>("GetSchoolClusterByAddressID", addressIDParameter);
        }
    
        public virtual ObjectResult<string> GetSchoolFromFacilityID(string facilityID)
        {
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("facilityID", facilityID) :
                new ObjectParameter("facilityID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSchoolFromFacilityID", facilityIDParameter);
        }
    
        public virtual int GetSchoolFromFacilityIDOutput(string facilityID, ObjectParameter sch)
        {
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("facilityID", facilityID) :
                new ObjectParameter("facilityID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSchoolFromFacilityIDOutput", facilityIDParameter, sch);
        }
    
        public virtual ObjectResult<GetSchoolHours_Result> GetSchoolHours(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolHours_Result>("GetSchoolHours", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolLocations_Result> GetSchoolLocations(string schyear)
        {
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolLocations_Result>("GetSchoolLocations", schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolPhotos_Result> GetSchoolPhotos(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolPhotos_Result>("GetSchoolPhotos", schParameter, schyearParameter);
        }
    
        public virtual int GetXFromLatLong(Nullable<double> longitude, Nullable<double> latitude, ObjectParameter x)
        {
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetXFromLatLong", longitudeParameter, latitudeParameter, x);
        }
    
        public virtual int GetYFromLatLong(Nullable<double> longitude, Nullable<double> latitude, ObjectParameter y)
        {
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetYFromLatLong", longitudeParameter, latitudeParameter, y);
        }
    
        public virtual int InsertAddress(Nullable<int> streetno, string street, string zip, Nullable<double> lat, Nullable<double> @long)
        {
            var streetnoParameter = streetno.HasValue ?
                new ObjectParameter("streetno", streetno) :
                new ObjectParameter("streetno", typeof(int));
    
            var streetParameter = street != null ?
                new ObjectParameter("street", street) :
                new ObjectParameter("street", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("lat", lat) :
                new ObjectParameter("lat", typeof(double));
    
            var longParameter = @long.HasValue ?
                new ObjectParameter("long", @long) :
                new ObjectParameter("long", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAddress", streetnoParameter, streetParameter, zipParameter, latParameter, longParameter);
        }
    
        public virtual int InsertAddressesClosestFacility(Nullable<int> addressID, Nullable<int> facilityID, string name, Nullable<double> totalLength)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var totalLengthParameter = totalLength.HasValue ?
                new ObjectParameter("TotalLength", totalLength) :
                new ObjectParameter("TotalLength", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAddressesClosestFacility", addressIDParameter, facilityIDParameter, nameParameter, totalLengthParameter);
        }
    
        public virtual int UpdateAddress(string locName, string side, string streetNo, string streetName, string streetSuff, string suffDir, string city, string zip, string addrType, string matchAddr, string cOBFromAddr, string cOBToAddr, Nullable<double> x, Nullable<double> y, Nullable<double> score, Nullable<int> id)
        {
            var locNameParameter = locName != null ?
                new ObjectParameter("locName", locName) :
                new ObjectParameter("locName", typeof(string));
    
            var sideParameter = side != null ?
                new ObjectParameter("side", side) :
                new ObjectParameter("side", typeof(string));
    
            var streetNoParameter = streetNo != null ?
                new ObjectParameter("streetNo", streetNo) :
                new ObjectParameter("streetNo", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("streetName", streetName) :
                new ObjectParameter("streetName", typeof(string));
    
            var streetSuffParameter = streetSuff != null ?
                new ObjectParameter("streetSuff", streetSuff) :
                new ObjectParameter("streetSuff", typeof(string));
    
            var suffDirParameter = suffDir != null ?
                new ObjectParameter("suffDir", suffDir) :
                new ObjectParameter("suffDir", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var addrTypeParameter = addrType != null ?
                new ObjectParameter("addrType", addrType) :
                new ObjectParameter("addrType", typeof(string));
    
            var matchAddrParameter = matchAddr != null ?
                new ObjectParameter("matchAddr", matchAddr) :
                new ObjectParameter("matchAddr", typeof(string));
    
            var cOBFromAddrParameter = cOBFromAddr != null ?
                new ObjectParameter("COBFromAddr", cOBFromAddr) :
                new ObjectParameter("COBFromAddr", typeof(string));
    
            var cOBToAddrParameter = cOBToAddr != null ?
                new ObjectParameter("COBToAddr", cOBToAddr) :
                new ObjectParameter("COBToAddr", typeof(string));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(double));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(double));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("score", score) :
                new ObjectParameter("score", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAddress", locNameParameter, sideParameter, streetNoParameter, streetNameParameter, streetSuffParameter, suffDirParameter, cityParameter, zipParameter, addrTypeParameter, matchAddrParameter, cOBFromAddrParameter, cOBToAddrParameter, xParameter, yParameter, scoreParameter, idParameter);
        }
    
        public virtual int UpdateAddressClosestFacility(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAddressClosestFacility", idParameter);
        }
    
        public virtual int UpdateAddressGoogle(Nullable<int> id, Nullable<double> lat, Nullable<double> lng)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("lat", lat) :
                new ObjectParameter("lat", typeof(double));
    
            var lngParameter = lng.HasValue ?
                new ObjectParameter("lng", lng) :
                new ObjectParameter("lng", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAddressGoogle", idParameter, latParameter, lngParameter);
        }
    
        public virtual int UpdateAddressNotFound(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAddressNotFound", idParameter);
        }
    
        public virtual int UpdateLatLongFromXY(Nullable<double> x, Nullable<double> y, Nullable<int> id)
        {
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(double));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLatLongFromXY", xParameter, yParameter, idParameter);
        }
    
        public virtual ObjectResult<ValidateAspenAddresses_Result> ValidateAspenAddresses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidateAspenAddresses_Result>("ValidateAspenAddresses");
        }
    
        public virtual int ActivateSessionToken(string sessionToken)
        {
            var sessionTokenParameter = sessionToken != null ?
                new ObjectParameter("SessionToken", sessionToken) :
                new ObjectParameter("SessionToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActivateSessionToken", sessionTokenParameter);
        }
    
        public virtual ObjectResult<CheckChoiceRankByToken_Result> CheckChoiceRankByToken(string studentToken)
        {
            var studentTokenParameter = studentToken != null ?
                new ObjectParameter("StudentToken", studentToken) :
                new ObjectParameter("StudentToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckChoiceRankByToken_Result>("CheckChoiceRankByToken", studentTokenParameter);
        }
    
        public virtual int CreateStudentChoices(string tierVersionValue, string typeValueStart, Nullable<bool> includeTwoWayValue)
        {
            var tierVersionValueParameter = tierVersionValue != null ?
                new ObjectParameter("TierVersionValue", tierVersionValue) :
                new ObjectParameter("TierVersionValue", typeof(string));
    
            var typeValueStartParameter = typeValueStart != null ?
                new ObjectParameter("TypeValueStart", typeValueStart) :
                new ObjectParameter("TypeValueStart", typeof(string));
    
            var includeTwoWayValueParameter = includeTwoWayValue.HasValue ?
                new ObjectParameter("includeTwoWayValue", includeTwoWayValue) :
                new ObjectParameter("includeTwoWayValue", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateStudentChoices", tierVersionValueParameter, typeValueStartParameter, includeTwoWayValueParameter);
        }
    
        public virtual ObjectResult<FindMatchingAddresses_Result> FindMatchingAddresses(Nullable<int> streetNo, string streetName, string zipcodeParam, string currentSchoolYear)
        {
            var streetNoParameter = streetNo.HasValue ?
                new ObjectParameter("StreetNo", streetNo) :
                new ObjectParameter("StreetNo", typeof(int));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var zipcodeParamParameter = zipcodeParam != null ?
                new ObjectParameter("ZipcodeParam", zipcodeParam) :
                new ObjectParameter("ZipcodeParam", typeof(string));
    
            var currentSchoolYearParameter = currentSchoolYear != null ?
                new ObjectParameter("CurrentSchoolYear", currentSchoolYear) :
                new ObjectParameter("CurrentSchoolYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindMatchingAddresses_Result>("FindMatchingAddresses", streetNoParameter, streetNameParameter, zipcodeParamParameter, currentSchoolYearParameter);
        }
    
        public virtual ObjectResult<string> GetProgramCodeList(string grade, string sEICode, string sNCode, Nullable<bool> isAWC, Nullable<bool> isBAS, Nullable<bool> isSife)
        {
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var sEICodeParameter = sEICode != null ?
                new ObjectParameter("SEICode", sEICode) :
                new ObjectParameter("SEICode", typeof(string));
    
            var sNCodeParameter = sNCode != null ?
                new ObjectParameter("SNCode", sNCode) :
                new ObjectParameter("SNCode", typeof(string));
    
            var isAWCParameter = isAWC.HasValue ?
                new ObjectParameter("IsAWC", isAWC) :
                new ObjectParameter("IsAWC", typeof(bool));
    
            var isBASParameter = isBAS.HasValue ?
                new ObjectParameter("IsBAS", isBAS) :
                new ObjectParameter("IsBAS", typeof(bool));
    
            var isSifeParameter = isSife.HasValue ?
                new ObjectParameter("IsSife", isSife) :
                new ObjectParameter("IsSife", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetProgramCodeList", gradeParameter, sEICodeParameter, sNCodeParameter, isAWCParameter, isBASParameter, isSifeParameter);
        }
    
        public virtual ObjectResult<GetRankDetailsByStudentToken_Result> GetRankDetailsByStudentToken(string studentToken)
        {
            var studentTokenParameter = studentToken != null ?
                new ObjectParameter("StudentToken", studentToken) :
                new ObjectParameter("StudentToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRankDetailsByStudentToken_Result>("GetRankDetailsByStudentToken", studentTokenParameter);
        }
    
        public virtual ObjectResult<GetRankedChoicesByCallID_Result> GetRankedChoicesByCallID(Nullable<int> callID, string sessionToken)
        {
            var callIDParameter = callID.HasValue ?
                new ObjectParameter("CallID", callID) :
                new ObjectParameter("CallID", typeof(int));
    
            var sessionTokenParameter = sessionToken != null ?
                new ObjectParameter("SessionToken", sessionToken) :
                new ObjectParameter("SessionToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRankedChoicesByCallID_Result>("GetRankedChoicesByCallID", callIDParameter, sessionTokenParameter);
        }
    
        public virtual int GetSchoolChoices(string schYear, string grade, string geo, string stuCluster, string stuZipCode, string siblingSchList, string addressID, Nullable<int> webServiceCallID, Nullable<bool> isAWC, string type, string tierVersion, ObjectParameter callID)
        {
            var schYearParameter = schYear != null ?
                new ObjectParameter("SchYear", schYear) :
                new ObjectParameter("SchYear", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var geoParameter = geo != null ?
                new ObjectParameter("geo", geo) :
                new ObjectParameter("geo", typeof(string));
    
            var stuClusterParameter = stuCluster != null ?
                new ObjectParameter("StuCluster", stuCluster) :
                new ObjectParameter("StuCluster", typeof(string));
    
            var stuZipCodeParameter = stuZipCode != null ?
                new ObjectParameter("StuZipCode", stuZipCode) :
                new ObjectParameter("StuZipCode", typeof(string));
    
            var siblingSchListParameter = siblingSchList != null ?
                new ObjectParameter("SiblingSchList", siblingSchList) :
                new ObjectParameter("SiblingSchList", typeof(string));
    
            var addressIDParameter = addressID != null ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(string));
    
            var webServiceCallIDParameter = webServiceCallID.HasValue ?
                new ObjectParameter("WebServiceCallID", webServiceCallID) :
                new ObjectParameter("WebServiceCallID", typeof(int));
    
            var isAWCParameter = isAWC.HasValue ?
                new ObjectParameter("IsAWC", isAWC) :
                new ObjectParameter("IsAWC", typeof(bool));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var tierVersionParameter = tierVersion != null ?
                new ObjectParameter("TierVersion", tierVersion) :
                new ObjectParameter("TierVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSchoolChoices", schYearParameter, gradeParameter, geoParameter, stuClusterParameter, stuZipCodeParameter, siblingSchListParameter, addressIDParameter, webServiceCallIDParameter, isAWCParameter, typeParameter, tierVersionParameter, callID);
        }
    
        public virtual ObjectResult<GetSchoolChoicesByCallID_Result> GetSchoolChoicesByCallID(Nullable<int> callID)
        {
            var callIDParameter = callID.HasValue ?
                new ObjectParameter("CallID", callID) :
                new ObjectParameter("CallID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolChoicesByCallID_Result>("GetSchoolChoicesByCallID", callIDParameter);
        }
    
        public virtual int GetSchoolChoicesForStudent(string schYear, string type, string studentno, string caseID, Nullable<int> addressIDParam, string geoParam, string gradeParam, Nullable<System.DateTime> dOBParam, string programCodeList, Nullable<bool> isAWCParam, Nullable<bool> isBASParam, string sNCodeParam, string lepStatusParam, string eLDLevelParam, string sifeStatusParam, string firstLangParam, string tierVersion, Nullable<bool> includeTwoWay, ObjectParameter callID)
        {
            var schYearParameter = schYear != null ?
                new ObjectParameter("SchYear", schYear) :
                new ObjectParameter("SchYear", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var studentnoParameter = studentno != null ?
                new ObjectParameter("Studentno", studentno) :
                new ObjectParameter("Studentno", typeof(string));
    
            var caseIDParameter = caseID != null ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(string));
    
            var addressIDParamParameter = addressIDParam.HasValue ?
                new ObjectParameter("AddressIDParam", addressIDParam) :
                new ObjectParameter("AddressIDParam", typeof(int));
    
            var geoParamParameter = geoParam != null ?
                new ObjectParameter("GeoParam", geoParam) :
                new ObjectParameter("GeoParam", typeof(string));
    
            var gradeParamParameter = gradeParam != null ?
                new ObjectParameter("GradeParam", gradeParam) :
                new ObjectParameter("GradeParam", typeof(string));
    
            var dOBParamParameter = dOBParam.HasValue ?
                new ObjectParameter("DOBParam", dOBParam) :
                new ObjectParameter("DOBParam", typeof(System.DateTime));
    
            var programCodeListParameter = programCodeList != null ?
                new ObjectParameter("ProgramCodeList", programCodeList) :
                new ObjectParameter("ProgramCodeList", typeof(string));
    
            var isAWCParamParameter = isAWCParam.HasValue ?
                new ObjectParameter("IsAWCParam", isAWCParam) :
                new ObjectParameter("IsAWCParam", typeof(bool));
    
            var isBASParamParameter = isBASParam.HasValue ?
                new ObjectParameter("IsBASParam", isBASParam) :
                new ObjectParameter("IsBASParam", typeof(bool));
    
            var sNCodeParamParameter = sNCodeParam != null ?
                new ObjectParameter("SNCodeParam", sNCodeParam) :
                new ObjectParameter("SNCodeParam", typeof(string));
    
            var lepStatusParamParameter = lepStatusParam != null ?
                new ObjectParameter("LepStatusParam", lepStatusParam) :
                new ObjectParameter("LepStatusParam", typeof(string));
    
            var eLDLevelParamParameter = eLDLevelParam != null ?
                new ObjectParameter("ELDLevelParam", eLDLevelParam) :
                new ObjectParameter("ELDLevelParam", typeof(string));
    
            var sifeStatusParamParameter = sifeStatusParam != null ?
                new ObjectParameter("SifeStatusParam", sifeStatusParam) :
                new ObjectParameter("SifeStatusParam", typeof(string));
    
            var firstLangParamParameter = firstLangParam != null ?
                new ObjectParameter("FirstLangParam", firstLangParam) :
                new ObjectParameter("FirstLangParam", typeof(string));
    
            var tierVersionParameter = tierVersion != null ?
                new ObjectParameter("TierVersion", tierVersion) :
                new ObjectParameter("TierVersion", typeof(string));
    
            var includeTwoWayParameter = includeTwoWay.HasValue ?
                new ObjectParameter("IncludeTwoWay", includeTwoWay) :
                new ObjectParameter("IncludeTwoWay", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSchoolChoicesForStudent", schYearParameter, typeParameter, studentnoParameter, caseIDParameter, addressIDParamParameter, geoParamParameter, gradeParamParameter, dOBParamParameter, programCodeListParameter, isAWCParamParameter, isBASParamParameter, sNCodeParamParameter, lepStatusParamParameter, eLDLevelParamParameter, sifeStatusParamParameter, firstLangParamParameter, tierVersionParameter, includeTwoWayParameter, callID);
        }
    
        public virtual ObjectResult<GetSchoolELLList_Result> GetSchoolELLList(string schyear, Nullable<int> addressID, string gradeLevel, string language)
        {
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var gradeLevelParameter = gradeLevel != null ?
                new ObjectParameter("GradeLevel", gradeLevel) :
                new ObjectParameter("GradeLevel", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolELLList_Result>("GetSchoolELLList", schyearParameter, addressIDParameter, gradeLevelParameter, languageParameter);
        }
    
        public virtual int GetSchoolInterestList(string schYear, string grade, string geo, string stuCluster, string stuZipCode, string siblingSchList, string addressID, Nullable<int> webServiceCallID, string tierVersion)
        {
            var schYearParameter = schYear != null ?
                new ObjectParameter("SchYear", schYear) :
                new ObjectParameter("SchYear", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var geoParameter = geo != null ?
                new ObjectParameter("geo", geo) :
                new ObjectParameter("geo", typeof(string));
    
            var stuClusterParameter = stuCluster != null ?
                new ObjectParameter("StuCluster", stuCluster) :
                new ObjectParameter("StuCluster", typeof(string));
    
            var stuZipCodeParameter = stuZipCode != null ?
                new ObjectParameter("StuZipCode", stuZipCode) :
                new ObjectParameter("StuZipCode", typeof(string));
    
            var siblingSchListParameter = siblingSchList != null ?
                new ObjectParameter("SiblingSchList", siblingSchList) :
                new ObjectParameter("SiblingSchList", typeof(string));
    
            var addressIDParameter = addressID != null ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(string));
    
            var webServiceCallIDParameter = webServiceCallID.HasValue ?
                new ObjectParameter("WebServiceCallID", webServiceCallID) :
                new ObjectParameter("WebServiceCallID", typeof(int));
    
            var tierVersionParameter = tierVersion != null ?
                new ObjectParameter("TierVersion", tierVersion) :
                new ObjectParameter("TierVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSchoolInterestList", schYearParameter, gradeParameter, geoParameter, stuClusterParameter, stuZipCodeParameter, siblingSchListParameter, addressIDParameter, webServiceCallIDParameter, tierVersionParameter);
        }
    
        public virtual int GetSchoolInterestListForStudent(string schYear, string type, string studentno, string caseID, Nullable<int> addressIDParam, string geoParam, string gradeParam, Nullable<System.DateTime> dOBParam, string programCodeList, Nullable<bool> isAWCParam, Nullable<bool> isBASParam, string sNCodeParam, string lepStatusParam, string eLDLevelParam, string sifeStatusParam, string firstLangParam, string siblingsList, string tierVersion)
        {
            var schYearParameter = schYear != null ?
                new ObjectParameter("SchYear", schYear) :
                new ObjectParameter("SchYear", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var studentnoParameter = studentno != null ?
                new ObjectParameter("Studentno", studentno) :
                new ObjectParameter("Studentno", typeof(string));
    
            var caseIDParameter = caseID != null ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(string));
    
            var addressIDParamParameter = addressIDParam.HasValue ?
                new ObjectParameter("AddressIDParam", addressIDParam) :
                new ObjectParameter("AddressIDParam", typeof(int));
    
            var geoParamParameter = geoParam != null ?
                new ObjectParameter("GeoParam", geoParam) :
                new ObjectParameter("GeoParam", typeof(string));
    
            var gradeParamParameter = gradeParam != null ?
                new ObjectParameter("GradeParam", gradeParam) :
                new ObjectParameter("GradeParam", typeof(string));
    
            var dOBParamParameter = dOBParam.HasValue ?
                new ObjectParameter("DOBParam", dOBParam) :
                new ObjectParameter("DOBParam", typeof(System.DateTime));
    
            var programCodeListParameter = programCodeList != null ?
                new ObjectParameter("ProgramCodeList", programCodeList) :
                new ObjectParameter("ProgramCodeList", typeof(string));
    
            var isAWCParamParameter = isAWCParam.HasValue ?
                new ObjectParameter("IsAWCParam", isAWCParam) :
                new ObjectParameter("IsAWCParam", typeof(bool));
    
            var isBASParamParameter = isBASParam.HasValue ?
                new ObjectParameter("IsBASParam", isBASParam) :
                new ObjectParameter("IsBASParam", typeof(bool));
    
            var sNCodeParamParameter = sNCodeParam != null ?
                new ObjectParameter("SNCodeParam", sNCodeParam) :
                new ObjectParameter("SNCodeParam", typeof(string));
    
            var lepStatusParamParameter = lepStatusParam != null ?
                new ObjectParameter("LepStatusParam", lepStatusParam) :
                new ObjectParameter("LepStatusParam", typeof(string));
    
            var eLDLevelParamParameter = eLDLevelParam != null ?
                new ObjectParameter("ELDLevelParam", eLDLevelParam) :
                new ObjectParameter("ELDLevelParam", typeof(string));
    
            var sifeStatusParamParameter = sifeStatusParam != null ?
                new ObjectParameter("SifeStatusParam", sifeStatusParam) :
                new ObjectParameter("SifeStatusParam", typeof(string));
    
            var firstLangParamParameter = firstLangParam != null ?
                new ObjectParameter("FirstLangParam", firstLangParam) :
                new ObjectParameter("FirstLangParam", typeof(string));
    
            var siblingsListParameter = siblingsList != null ?
                new ObjectParameter("SiblingsList", siblingsList) :
                new ObjectParameter("SiblingsList", typeof(string));
    
            var tierVersionParameter = tierVersion != null ?
                new ObjectParameter("TierVersion", tierVersion) :
                new ObjectParameter("TierVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSchoolInterestListForStudent", schYearParameter, typeParameter, studentnoParameter, caseIDParameter, addressIDParamParameter, geoParamParameter, gradeParamParameter, dOBParamParameter, programCodeListParameter, isAWCParamParameter, isBASParamParameter, sNCodeParamParameter, lepStatusParamParameter, eLDLevelParamParameter, sifeStatusParamParameter, firstLangParamParameter, siblingsListParameter, tierVersionParameter);
        }
    
        public virtual int GetSchoolInterestListForStudent_bkup(string schYear, string type, string studentno, string caseID, Nullable<int> addressIDParam, string geoParam, string gradeParam, Nullable<System.DateTime> dOBParam, string programCodeList, Nullable<bool> isAWCParam, Nullable<bool> isBASParam, string sNCodeParam, string lepStatusParam, string eLDLevelParam, string sifeStatusParam, string firstLangParam, string siblingsList, string tierVersion)
        {
            var schYearParameter = schYear != null ?
                new ObjectParameter("SchYear", schYear) :
                new ObjectParameter("SchYear", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var studentnoParameter = studentno != null ?
                new ObjectParameter("Studentno", studentno) :
                new ObjectParameter("Studentno", typeof(string));
    
            var caseIDParameter = caseID != null ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(string));
    
            var addressIDParamParameter = addressIDParam.HasValue ?
                new ObjectParameter("AddressIDParam", addressIDParam) :
                new ObjectParameter("AddressIDParam", typeof(int));
    
            var geoParamParameter = geoParam != null ?
                new ObjectParameter("GeoParam", geoParam) :
                new ObjectParameter("GeoParam", typeof(string));
    
            var gradeParamParameter = gradeParam != null ?
                new ObjectParameter("GradeParam", gradeParam) :
                new ObjectParameter("GradeParam", typeof(string));
    
            var dOBParamParameter = dOBParam.HasValue ?
                new ObjectParameter("DOBParam", dOBParam) :
                new ObjectParameter("DOBParam", typeof(System.DateTime));
    
            var programCodeListParameter = programCodeList != null ?
                new ObjectParameter("ProgramCodeList", programCodeList) :
                new ObjectParameter("ProgramCodeList", typeof(string));
    
            var isAWCParamParameter = isAWCParam.HasValue ?
                new ObjectParameter("IsAWCParam", isAWCParam) :
                new ObjectParameter("IsAWCParam", typeof(bool));
    
            var isBASParamParameter = isBASParam.HasValue ?
                new ObjectParameter("IsBASParam", isBASParam) :
                new ObjectParameter("IsBASParam", typeof(bool));
    
            var sNCodeParamParameter = sNCodeParam != null ?
                new ObjectParameter("SNCodeParam", sNCodeParam) :
                new ObjectParameter("SNCodeParam", typeof(string));
    
            var lepStatusParamParameter = lepStatusParam != null ?
                new ObjectParameter("LepStatusParam", lepStatusParam) :
                new ObjectParameter("LepStatusParam", typeof(string));
    
            var eLDLevelParamParameter = eLDLevelParam != null ?
                new ObjectParameter("ELDLevelParam", eLDLevelParam) :
                new ObjectParameter("ELDLevelParam", typeof(string));
    
            var sifeStatusParamParameter = sifeStatusParam != null ?
                new ObjectParameter("SifeStatusParam", sifeStatusParam) :
                new ObjectParameter("SifeStatusParam", typeof(string));
    
            var firstLangParamParameter = firstLangParam != null ?
                new ObjectParameter("FirstLangParam", firstLangParam) :
                new ObjectParameter("FirstLangParam", typeof(string));
    
            var siblingsListParameter = siblingsList != null ?
                new ObjectParameter("SiblingsList", siblingsList) :
                new ObjectParameter("SiblingsList", typeof(string));
    
            var tierVersionParameter = tierVersion != null ?
                new ObjectParameter("TierVersion", tierVersion) :
                new ObjectParameter("TierVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSchoolInterestListForStudent_bkup", schYearParameter, typeParameter, studentnoParameter, caseIDParameter, addressIDParamParameter, geoParamParameter, gradeParamParameter, dOBParamParameter, programCodeListParameter, isAWCParamParameter, isBASParamParameter, sNCodeParamParameter, lepStatusParamParameter, eLDLevelParamParameter, sifeStatusParamParameter, firstLangParamParameter, siblingsListParameter, tierVersionParameter);
        }
    
        public virtual ObjectResult<GetSchoolSPEDList_Result> GetSchoolSPEDList(string schyear, Nullable<int> addressID, string gradeLevel)
        {
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var gradeLevelParameter = gradeLevel != null ?
                new ObjectParameter("GradeLevel", gradeLevel) :
                new ObjectParameter("GradeLevel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolSPEDList_Result>("GetSchoolSPEDList", schyearParameter, addressIDParameter, gradeLevelParameter);
        }
    
        public virtual ObjectResult<GetSessionByToken_Result> GetSessionByToken(string sessionToken)
        {
            var sessionTokenParameter = sessionToken != null ?
                new ObjectParameter("SessionToken", sessionToken) :
                new ObjectParameter("SessionToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSessionByToken_Result>("GetSessionByToken", sessionTokenParameter);
        }
    
        public virtual int GetSiblingChoice(Nullable<int> currentSchoolYear, string formattedCaseID, Nullable<int> schYearInt, ObjectParameter siblingSchoolInfo, ObjectParameter siblingSchoolsOut, string studentno)
        {
            var currentSchoolYearParameter = currentSchoolYear.HasValue ?
                new ObjectParameter("CurrentSchoolYear", currentSchoolYear) :
                new ObjectParameter("CurrentSchoolYear", typeof(int));
    
            var formattedCaseIDParameter = formattedCaseID != null ?
                new ObjectParameter("formattedCaseID", formattedCaseID) :
                new ObjectParameter("formattedCaseID", typeof(string));
    
            var schYearIntParameter = schYearInt.HasValue ?
                new ObjectParameter("SchYearInt", schYearInt) :
                new ObjectParameter("SchYearInt", typeof(int));
    
            var studentnoParameter = studentno != null ?
                new ObjectParameter("Studentno", studentno) :
                new ObjectParameter("Studentno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiblingChoice", currentSchoolYearParameter, formattedCaseIDParameter, schYearIntParameter, siblingSchoolInfo, siblingSchoolsOut, studentnoParameter);
        }
    
        public virtual ObjectResult<GetStudentByToken_Result> GetStudentByToken(string studentToken)
        {
            var studentTokenParameter = studentToken != null ?
                new ObjectParameter("StudentToken", studentToken) :
                new ObjectParameter("StudentToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentByToken_Result>("GetStudentByToken", studentTokenParameter);
        }
    
        public virtual ObjectResult<GetStudentInfoByToken_Result> GetStudentInfoByToken(string token)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentInfoByToken_Result>("GetStudentInfoByToken", tokenParameter);
        }
    
        public virtual ObjectResult<GetStudentMailerExtract_Result> GetStudentMailerExtract(Nullable<int> runID, Nullable<bool> isOnlineChoiceOnly)
        {
            var runIDParameter = runID.HasValue ?
                new ObjectParameter("RunID", runID) :
                new ObjectParameter("RunID", typeof(int));
    
            var isOnlineChoiceOnlyParameter = isOnlineChoiceOnly.HasValue ?
                new ObjectParameter("IsOnlineChoiceOnly", isOnlineChoiceOnly) :
                new ObjectParameter("IsOnlineChoiceOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentMailerExtract_Result>("GetStudentMailerExtract", runIDParameter, isOnlineChoiceOnlyParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> GetStudentTokenByCallID(Nullable<int> callID)
        {
            var callIDParameter = callID.HasValue ?
                new ObjectParameter("CallID", callID) :
                new ObjectParameter("CallID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("GetStudentTokenByCallID", callIDParameter);
        }
    
        public virtual ObjectResult<GetStudentTokenBySessionToken_Result> GetStudentTokenBySessionToken(string sessionToken)
        {
            var sessionTokenParameter = sessionToken != null ?
                new ObjectParameter("SessionToken", sessionToken) :
                new ObjectParameter("SessionToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentTokenBySessionToken_Result>("GetStudentTokenBySessionToken", sessionTokenParameter);
        }
    
        public virtual ObjectResult<GetUserSessionByToken_Result> GetUserSessionByToken(string studentToken)
        {
            var studentTokenParameter = studentToken != null ?
                new ObjectParameter("StudentToken", studentToken) :
                new ObjectParameter("StudentToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserSessionByToken_Result>("GetUserSessionByToken", studentTokenParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetZipCodeValid(string zipcode)
        {
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetZipCodeValid", zipcodeParameter);
        }
    
        public virtual int InsertErrorLog(string exceptionDetails, string endpointName)
        {
            var exceptionDetailsParameter = exceptionDetails != null ?
                new ObjectParameter("ExceptionDetails", exceptionDetails) :
                new ObjectParameter("ExceptionDetails", typeof(string));
    
            var endpointNameParameter = endpointName != null ?
                new ObjectParameter("endpointName", endpointName) :
                new ObjectParameter("endpointName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertErrorLog", exceptionDetailsParameter, endpointNameParameter);
        }
    
        public virtual int InsertLogAddressMatches(Nullable<int> webServiceCallID, string streetNum, string street, string sectionOfCity, string zipCode, string zone, string geoCode, string x, string y, string latitude, string logitude, string inputStreetNumber, string inputStreet, string inputAddressID, string inputZipCode)
        {
            var webServiceCallIDParameter = webServiceCallID.HasValue ?
                new ObjectParameter("WebServiceCallID", webServiceCallID) :
                new ObjectParameter("WebServiceCallID", typeof(int));
    
            var streetNumParameter = streetNum != null ?
                new ObjectParameter("StreetNum", streetNum) :
                new ObjectParameter("StreetNum", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var sectionOfCityParameter = sectionOfCity != null ?
                new ObjectParameter("SectionOfCity", sectionOfCity) :
                new ObjectParameter("SectionOfCity", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("Zone", zone) :
                new ObjectParameter("Zone", typeof(string));
    
            var geoCodeParameter = geoCode != null ?
                new ObjectParameter("GeoCode", geoCode) :
                new ObjectParameter("GeoCode", typeof(string));
    
            var xParameter = x != null ?
                new ObjectParameter("X", x) :
                new ObjectParameter("X", typeof(string));
    
            var yParameter = y != null ?
                new ObjectParameter("Y", y) :
                new ObjectParameter("Y", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var logitudeParameter = logitude != null ?
                new ObjectParameter("Logitude", logitude) :
                new ObjectParameter("Logitude", typeof(string));
    
            var inputStreetNumberParameter = inputStreetNumber != null ?
                new ObjectParameter("InputStreetNumber", inputStreetNumber) :
                new ObjectParameter("InputStreetNumber", typeof(string));
    
            var inputStreetParameter = inputStreet != null ?
                new ObjectParameter("InputStreet", inputStreet) :
                new ObjectParameter("InputStreet", typeof(string));
    
            var inputAddressIDParameter = inputAddressID != null ?
                new ObjectParameter("InputAddressID", inputAddressID) :
                new ObjectParameter("InputAddressID", typeof(string));
    
            var inputZipCodeParameter = inputZipCode != null ?
                new ObjectParameter("InputZipCode", inputZipCode) :
                new ObjectParameter("InputZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLogAddressMatches", webServiceCallIDParameter, streetNumParameter, streetParameter, sectionOfCityParameter, zipCodeParameter, zoneParameter, geoCodeParameter, xParameter, yParameter, latitudeParameter, logitudeParameter, inputStreetNumberParameter, inputStreetParameter, inputAddressIDParameter, inputZipCodeParameter);
        }
    
        public virtual int InsertLogSchoolChoices(Nullable<int> webServiceCallID, string schoolYear, string school, string grade, string programCode, string assignmentWalkEligibilityStatus, string transEligible, string tier, Nullable<int> x, Nullable<int> y, Nullable<double> latitude, Nullable<double> logitude, string numClasses, string eligibility, Nullable<double> straightLineDistance, string sortClause, string schoolName, string inputSchoolYear, string inputGrade, string inputStreetNumber, string inputStreet, string inputZipCode, string inputX, string inputY, string inputSiblingSchList, string inputStuZipCode, string webService)
        {
            var webServiceCallIDParameter = webServiceCallID.HasValue ?
                new ObjectParameter("WebServiceCallID", webServiceCallID) :
                new ObjectParameter("WebServiceCallID", typeof(int));
    
            var schoolYearParameter = schoolYear != null ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var programCodeParameter = programCode != null ?
                new ObjectParameter("ProgramCode", programCode) :
                new ObjectParameter("ProgramCode", typeof(string));
    
            var assignmentWalkEligibilityStatusParameter = assignmentWalkEligibilityStatus != null ?
                new ObjectParameter("AssignmentWalkEligibilityStatus", assignmentWalkEligibilityStatus) :
                new ObjectParameter("AssignmentWalkEligibilityStatus", typeof(string));
    
            var transEligibleParameter = transEligible != null ?
                new ObjectParameter("TransEligible", transEligible) :
                new ObjectParameter("TransEligible", typeof(string));
    
            var tierParameter = tier != null ?
                new ObjectParameter("Tier", tier) :
                new ObjectParameter("Tier", typeof(string));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("X", x) :
                new ObjectParameter("X", typeof(int));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("Y", y) :
                new ObjectParameter("Y", typeof(int));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var logitudeParameter = logitude.HasValue ?
                new ObjectParameter("Logitude", logitude) :
                new ObjectParameter("Logitude", typeof(double));
    
            var numClassesParameter = numClasses != null ?
                new ObjectParameter("NumClasses", numClasses) :
                new ObjectParameter("NumClasses", typeof(string));
    
            var eligibilityParameter = eligibility != null ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(string));
    
            var straightLineDistanceParameter = straightLineDistance.HasValue ?
                new ObjectParameter("StraightLineDistance", straightLineDistance) :
                new ObjectParameter("StraightLineDistance", typeof(double));
    
            var sortClauseParameter = sortClause != null ?
                new ObjectParameter("SortClause", sortClause) :
                new ObjectParameter("SortClause", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var inputSchoolYearParameter = inputSchoolYear != null ?
                new ObjectParameter("InputSchoolYear", inputSchoolYear) :
                new ObjectParameter("InputSchoolYear", typeof(string));
    
            var inputGradeParameter = inputGrade != null ?
                new ObjectParameter("InputGrade", inputGrade) :
                new ObjectParameter("InputGrade", typeof(string));
    
            var inputStreetNumberParameter = inputStreetNumber != null ?
                new ObjectParameter("InputStreetNumber", inputStreetNumber) :
                new ObjectParameter("InputStreetNumber", typeof(string));
    
            var inputStreetParameter = inputStreet != null ?
                new ObjectParameter("InputStreet", inputStreet) :
                new ObjectParameter("InputStreet", typeof(string));
    
            var inputZipCodeParameter = inputZipCode != null ?
                new ObjectParameter("InputZipCode", inputZipCode) :
                new ObjectParameter("InputZipCode", typeof(string));
    
            var inputXParameter = inputX != null ?
                new ObjectParameter("InputX", inputX) :
                new ObjectParameter("InputX", typeof(string));
    
            var inputYParameter = inputY != null ?
                new ObjectParameter("InputY", inputY) :
                new ObjectParameter("InputY", typeof(string));
    
            var inputSiblingSchListParameter = inputSiblingSchList != null ?
                new ObjectParameter("InputSiblingSchList", inputSiblingSchList) :
                new ObjectParameter("InputSiblingSchList", typeof(string));
    
            var inputStuZipCodeParameter = inputStuZipCode != null ?
                new ObjectParameter("InputStuZipCode", inputStuZipCode) :
                new ObjectParameter("InputStuZipCode", typeof(string));
    
            var webServiceParameter = webService != null ?
                new ObjectParameter("WebService", webService) :
                new ObjectParameter("WebService", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLogSchoolChoices", webServiceCallIDParameter, schoolYearParameter, schoolParameter, gradeParameter, programCodeParameter, assignmentWalkEligibilityStatusParameter, transEligibleParameter, tierParameter, xParameter, yParameter, latitudeParameter, logitudeParameter, numClassesParameter, eligibilityParameter, straightLineDistanceParameter, sortClauseParameter, schoolNameParameter, inputSchoolYearParameter, inputGradeParameter, inputStreetNumberParameter, inputStreetParameter, inputZipCodeParameter, inputXParameter, inputYParameter, inputSiblingSchListParameter, inputStuZipCodeParameter, webServiceParameter);
        }
    
        public virtual int InsertLogSchoolInterestList(Nullable<int> webServiceCallID, string schoolYear, string school, string grade, string programCode, string assignmentWalkEligibilityStatus, string transEligible, string tier, Nullable<int> x, Nullable<int> y, Nullable<double> latitude, Nullable<double> logitude, string numClasses, string eligibility, Nullable<double> straightLineDistance, string sortClause, string schoolName, string inputSchoolYear, string inputGrade, string inputX, string inputY, string inputSiblingSchList)
        {
            var webServiceCallIDParameter = webServiceCallID.HasValue ?
                new ObjectParameter("WebServiceCallID", webServiceCallID) :
                new ObjectParameter("WebServiceCallID", typeof(int));
    
            var schoolYearParameter = schoolYear != null ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var programCodeParameter = programCode != null ?
                new ObjectParameter("ProgramCode", programCode) :
                new ObjectParameter("ProgramCode", typeof(string));
    
            var assignmentWalkEligibilityStatusParameter = assignmentWalkEligibilityStatus != null ?
                new ObjectParameter("AssignmentWalkEligibilityStatus", assignmentWalkEligibilityStatus) :
                new ObjectParameter("AssignmentWalkEligibilityStatus", typeof(string));
    
            var transEligibleParameter = transEligible != null ?
                new ObjectParameter("TransEligible", transEligible) :
                new ObjectParameter("TransEligible", typeof(string));
    
            var tierParameter = tier != null ?
                new ObjectParameter("Tier", tier) :
                new ObjectParameter("Tier", typeof(string));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("X", x) :
                new ObjectParameter("X", typeof(int));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("Y", y) :
                new ObjectParameter("Y", typeof(int));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var logitudeParameter = logitude.HasValue ?
                new ObjectParameter("Logitude", logitude) :
                new ObjectParameter("Logitude", typeof(double));
    
            var numClassesParameter = numClasses != null ?
                new ObjectParameter("NumClasses", numClasses) :
                new ObjectParameter("NumClasses", typeof(string));
    
            var eligibilityParameter = eligibility != null ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(string));
    
            var straightLineDistanceParameter = straightLineDistance.HasValue ?
                new ObjectParameter("StraightLineDistance", straightLineDistance) :
                new ObjectParameter("StraightLineDistance", typeof(double));
    
            var sortClauseParameter = sortClause != null ?
                new ObjectParameter("SortClause", sortClause) :
                new ObjectParameter("SortClause", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var inputSchoolYearParameter = inputSchoolYear != null ?
                new ObjectParameter("InputSchoolYear", inputSchoolYear) :
                new ObjectParameter("InputSchoolYear", typeof(string));
    
            var inputGradeParameter = inputGrade != null ?
                new ObjectParameter("InputGrade", inputGrade) :
                new ObjectParameter("InputGrade", typeof(string));
    
            var inputXParameter = inputX != null ?
                new ObjectParameter("InputX", inputX) :
                new ObjectParameter("InputX", typeof(string));
    
            var inputYParameter = inputY != null ?
                new ObjectParameter("InputY", inputY) :
                new ObjectParameter("InputY", typeof(string));
    
            var inputSiblingSchListParameter = inputSiblingSchList != null ?
                new ObjectParameter("InputSiblingSchList", inputSiblingSchList) :
                new ObjectParameter("InputSiblingSchList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLogSchoolInterestList", webServiceCallIDParameter, schoolYearParameter, schoolParameter, gradeParameter, programCodeParameter, assignmentWalkEligibilityStatusParameter, transEligibleParameter, tierParameter, xParameter, yParameter, latitudeParameter, logitudeParameter, numClassesParameter, eligibilityParameter, straightLineDistanceParameter, sortClauseParameter, schoolNameParameter, inputSchoolYearParameter, inputGradeParameter, inputXParameter, inputYParameter, inputSiblingSchListParameter);
        }
    
        public virtual int InsertPassCode(string studentIdentity, string userEmailAddress, string userPasscode)
        {
            var studentIdentityParameter = studentIdentity != null ?
                new ObjectParameter("StudentIdentity", studentIdentity) :
                new ObjectParameter("StudentIdentity", typeof(string));
    
            var userEmailAddressParameter = userEmailAddress != null ?
                new ObjectParameter("UserEmailAddress", userEmailAddress) :
                new ObjectParameter("UserEmailAddress", typeof(string));
    
            var userPasscodeParameter = userPasscode != null ?
                new ObjectParameter("UserPasscode", userPasscode) :
                new ObjectParameter("UserPasscode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPassCode", studentIdentityParameter, userEmailAddressParameter, userPasscodeParameter);
        }
    
        public virtual int InvalidateUserSession(string sessionToken)
        {
            var sessionTokenParameter = sessionToken != null ?
                new ObjectParameter("SessionToken", sessionToken) :
                new ObjectParameter("SessionToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvalidateUserSession", sessionTokenParameter);
        }
    
        public virtual int LogWebServiceCallsToDatabase(string uRL, Nullable<int> hTTPStatusCode, Nullable<System.DateTime> transactionDateAndTime, string version, string webService, ObjectParameter webServiceCallID)
        {
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var hTTPStatusCodeParameter = hTTPStatusCode.HasValue ?
                new ObjectParameter("HTTPStatusCode", hTTPStatusCode) :
                new ObjectParameter("HTTPStatusCode", typeof(int));
    
            var transactionDateAndTimeParameter = transactionDateAndTime.HasValue ?
                new ObjectParameter("TransactionDateAndTime", transactionDateAndTime) :
                new ObjectParameter("TransactionDateAndTime", typeof(System.DateTime));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var webServiceParameter = webService != null ?
                new ObjectParameter("WebService", webService) :
                new ObjectParameter("WebService", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogWebServiceCallsToDatabase", uRLParameter, hTTPStatusCodeParameter, transactionDateAndTimeParameter, versionParameter, webServiceParameter, webServiceCallID);
        }
    
        public virtual int UpdateEmailSent(Nullable<int> runID, Nullable<int> studentNo)
        {
            var runIDParameter = runID.HasValue ?
                new ObjectParameter("RunID", runID) :
                new ObjectParameter("RunID", typeof(int));
    
            var studentNoParameter = studentNo.HasValue ?
                new ObjectParameter("StudentNo", studentNo) :
                new ObjectParameter("StudentNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmailSent", runIDParameter, studentNoParameter);
        }
    
        public virtual int UpdatePassCode(string sessionToken, string newPassCode, string studentToken, string contactEmail)
        {
            var sessionTokenParameter = sessionToken != null ?
                new ObjectParameter("SessionToken", sessionToken) :
                new ObjectParameter("SessionToken", typeof(string));
    
            var newPassCodeParameter = newPassCode != null ?
                new ObjectParameter("NewPassCode", newPassCode) :
                new ObjectParameter("NewPassCode", typeof(string));
    
            var studentTokenParameter = studentToken != null ?
                new ObjectParameter("StudentToken", studentToken) :
                new ObjectParameter("StudentToken", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassCode", sessionTokenParameter, newPassCodeParameter, studentTokenParameter, contactEmailParameter);
        }
    
        public virtual int UpdateSchoolChoiceIDFromProduction(string sscSSS_OID, Nullable<int> sscId)
        {
            var sscSSS_OIDParameter = sscSSS_OID != null ?
                new ObjectParameter("sscSSS_OID", sscSSS_OID) :
                new ObjectParameter("sscSSS_OID", typeof(string));
    
            var sscIdParameter = sscId.HasValue ?
                new ObjectParameter("sscId", sscId) :
                new ObjectParameter("sscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolChoiceIDFromProduction", sscSSS_OIDParameter, sscIdParameter);
        }
    
        public virtual int UpdateSchoolChoiceRank(Nullable<int> webserviceCallID, string schoolID, string programCode, string sessionToken, Nullable<int> rank)
        {
            var webserviceCallIDParameter = webserviceCallID.HasValue ?
                new ObjectParameter("WebserviceCallID", webserviceCallID) :
                new ObjectParameter("WebserviceCallID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var programCodeParameter = programCode != null ?
                new ObjectParameter("ProgramCode", programCode) :
                new ObjectParameter("ProgramCode", typeof(string));
    
            var sessionTokenParameter = sessionToken != null ?
                new ObjectParameter("SessionToken", sessionToken) :
                new ObjectParameter("SessionToken", typeof(string));
    
            var rankParameter = rank.HasValue ?
                new ObjectParameter("Rank", rank) :
                new ObjectParameter("Rank", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolChoiceRank", webserviceCallIDParameter, schoolIDParameter, programCodeParameter, sessionTokenParameter, rankParameter);
        }
    
        public virtual int UpdateStudentChoiceCase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentChoiceCase");
        }
    
        public virtual int UpdateStudentChoiceCasefromProduction(string sccSTC_ID, string sccStudentLocalId, string sccSTC_OID, string sccSTD_OID, Nullable<System.DateTime> sccSTC_LAST_MODIFIED, string sccRound, string sccCaseType, string sccCaseStatus, Nullable<int> sccId)
        {
            var sccSTC_IDParameter = sccSTC_ID != null ?
                new ObjectParameter("sccSTC_ID", sccSTC_ID) :
                new ObjectParameter("sccSTC_ID", typeof(string));
    
            var sccStudentLocalIdParameter = sccStudentLocalId != null ?
                new ObjectParameter("sccStudentLocalId", sccStudentLocalId) :
                new ObjectParameter("sccStudentLocalId", typeof(string));
    
            var sccSTC_OIDParameter = sccSTC_OID != null ?
                new ObjectParameter("sccSTC_OID", sccSTC_OID) :
                new ObjectParameter("sccSTC_OID", typeof(string));
    
            var sccSTD_OIDParameter = sccSTD_OID != null ?
                new ObjectParameter("sccSTD_OID", sccSTD_OID) :
                new ObjectParameter("sccSTD_OID", typeof(string));
    
            var sccSTC_LAST_MODIFIEDParameter = sccSTC_LAST_MODIFIED.HasValue ?
                new ObjectParameter("sccSTC_LAST_MODIFIED", sccSTC_LAST_MODIFIED) :
                new ObjectParameter("sccSTC_LAST_MODIFIED", typeof(System.DateTime));
    
            var sccRoundParameter = sccRound != null ?
                new ObjectParameter("sccRound", sccRound) :
                new ObjectParameter("sccRound", typeof(string));
    
            var sccCaseTypeParameter = sccCaseType != null ?
                new ObjectParameter("sccCaseType", sccCaseType) :
                new ObjectParameter("sccCaseType", typeof(string));
    
            var sccCaseStatusParameter = sccCaseStatus != null ?
                new ObjectParameter("sccCaseStatus", sccCaseStatus) :
                new ObjectParameter("sccCaseStatus", typeof(string));
    
            var sccIdParameter = sccId.HasValue ?
                new ObjectParameter("sccId", sccId) :
                new ObjectParameter("sccId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentChoiceCasefromProduction", sccSTC_IDParameter, sccStudentLocalIdParameter, sccSTC_OIDParameter, sccSTD_OIDParameter, sccSTC_LAST_MODIFIEDParameter, sccRoundParameter, sccCaseTypeParameter, sccCaseStatusParameter, sccIdParameter);
        }
    
        public virtual int UpdateStudentRankChoiceSubmit(string sessionToken, string studentToken, string verficationText)
        {
            var sessionTokenParameter = sessionToken != null ?
                new ObjectParameter("SessionToken", sessionToken) :
                new ObjectParameter("SessionToken", typeof(string));
    
            var studentTokenParameter = studentToken != null ?
                new ObjectParameter("StudentToken", studentToken) :
                new ObjectParameter("StudentToken", typeof(string));
    
            var verficationTextParameter = verficationText != null ?
                new ObjectParameter("VerficationText", verficationText) :
                new ObjectParameter("VerficationText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentRankChoiceSubmit", sessionTokenParameter, studentTokenParameter, verficationTextParameter);
        }
    
        public virtual int UpdateStudentSchoolChoiceFromProduction(string sscSCA_OID, Nullable<int> sscRank, Nullable<System.DateTime> sscSSS_LAST_MODIFIED, string sscReviewStatus, Nullable<System.DateTime> sscReviewDate, Nullable<int> sscId)
        {
            var sscSCA_OIDParameter = sscSCA_OID != null ?
                new ObjectParameter("sscSCA_OID", sscSCA_OID) :
                new ObjectParameter("sscSCA_OID", typeof(string));
    
            var sscRankParameter = sscRank.HasValue ?
                new ObjectParameter("sscRank", sscRank) :
                new ObjectParameter("sscRank", typeof(int));
    
            var sscSSS_LAST_MODIFIEDParameter = sscSSS_LAST_MODIFIED.HasValue ?
                new ObjectParameter("sscSSS_LAST_MODIFIED", sscSSS_LAST_MODIFIED) :
                new ObjectParameter("sscSSS_LAST_MODIFIED", typeof(System.DateTime));
    
            var sscReviewStatusParameter = sscReviewStatus != null ?
                new ObjectParameter("sscReviewStatus", sscReviewStatus) :
                new ObjectParameter("sscReviewStatus", typeof(string));
    
            var sscReviewDateParameter = sscReviewDate.HasValue ?
                new ObjectParameter("sscReviewDate", sscReviewDate) :
                new ObjectParameter("sscReviewDate", typeof(System.DateTime));
    
            var sscIdParameter = sscId.HasValue ?
                new ObjectParameter("sscId", sscId) :
                new ObjectParameter("sscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentSchoolChoiceFromProduction", sscSCA_OIDParameter, sscRankParameter, sscSSS_LAST_MODIFIEDParameter, sscReviewStatusParameter, sscReviewDateParameter, sscIdParameter);
        }
    
        public virtual int UpdateStudentSchoolChoiceMaxCallid()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentSchoolChoiceMaxCallid");
        }
    
        public virtual int UpdateValidateOnStudentChoiceCase(Nullable<int> sccId)
        {
            var sccIdParameter = sccId.HasValue ?
                new ObjectParameter("sccId", sccId) :
                new ObjectParameter("sccId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateValidateOnStudentChoiceCase", sccIdParameter);
        }
    
        public virtual int AddProfileUser(string sch, string userID)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProfileUser", schParameter, userIDParameter);
        }
    
        public virtual int AddSchoolDescriptions(string sch, string schyear, string schSpecial, string schFocus, Nullable<bool> specialApp, string specialAppNarr, string uniformPolicy, string uniformPolicyDesc, string sfl1, string sfl2, string sfl3, string sfl4, string sfl5, string sfl6, string sfl7, string sfl8, string sfl9, string sfl10)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var schSpecialParameter = schSpecial != null ?
                new ObjectParameter("schSpecial", schSpecial) :
                new ObjectParameter("schSpecial", typeof(string));
    
            var schFocusParameter = schFocus != null ?
                new ObjectParameter("schFocus", schFocus) :
                new ObjectParameter("schFocus", typeof(string));
    
            var specialAppParameter = specialApp.HasValue ?
                new ObjectParameter("specialApp", specialApp) :
                new ObjectParameter("specialApp", typeof(bool));
    
            var specialAppNarrParameter = specialAppNarr != null ?
                new ObjectParameter("specialAppNarr", specialAppNarr) :
                new ObjectParameter("specialAppNarr", typeof(string));
    
            var uniformPolicyParameter = uniformPolicy != null ?
                new ObjectParameter("uniformPolicy", uniformPolicy) :
                new ObjectParameter("uniformPolicy", typeof(string));
    
            var uniformPolicyDescParameter = uniformPolicyDesc != null ?
                new ObjectParameter("uniformPolicyDesc", uniformPolicyDesc) :
                new ObjectParameter("uniformPolicyDesc", typeof(string));
    
            var sfl1Parameter = sfl1 != null ?
                new ObjectParameter("sfl1", sfl1) :
                new ObjectParameter("sfl1", typeof(string));
    
            var sfl2Parameter = sfl2 != null ?
                new ObjectParameter("sfl2", sfl2) :
                new ObjectParameter("sfl2", typeof(string));
    
            var sfl3Parameter = sfl3 != null ?
                new ObjectParameter("sfl3", sfl3) :
                new ObjectParameter("sfl3", typeof(string));
    
            var sfl4Parameter = sfl4 != null ?
                new ObjectParameter("sfl4", sfl4) :
                new ObjectParameter("sfl4", typeof(string));
    
            var sfl5Parameter = sfl5 != null ?
                new ObjectParameter("sfl5", sfl5) :
                new ObjectParameter("sfl5", typeof(string));
    
            var sfl6Parameter = sfl6 != null ?
                new ObjectParameter("sfl6", sfl6) :
                new ObjectParameter("sfl6", typeof(string));
    
            var sfl7Parameter = sfl7 != null ?
                new ObjectParameter("sfl7", sfl7) :
                new ObjectParameter("sfl7", typeof(string));
    
            var sfl8Parameter = sfl8 != null ?
                new ObjectParameter("sfl8", sfl8) :
                new ObjectParameter("sfl8", typeof(string));
    
            var sfl9Parameter = sfl9 != null ?
                new ObjectParameter("sfl9", sfl9) :
                new ObjectParameter("sfl9", typeof(string));
    
            var sfl10Parameter = sfl10 != null ?
                new ObjectParameter("sfl10", sfl10) :
                new ObjectParameter("sfl10", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSchoolDescriptions", schParameter, schyearParameter, schSpecialParameter, schFocusParameter, specialAppParameter, specialAppNarrParameter, uniformPolicyParameter, uniformPolicyDescParameter, sfl1Parameter, sfl2Parameter, sfl3Parameter, sfl4Parameter, sfl5Parameter, sfl6Parameter, sfl7Parameter, sfl8Parameter, sfl9Parameter, sfl10Parameter);
        }
    
        public virtual int AddSchoolFacilities(string sch, string schyear, Nullable<bool> hasAuditorium, Nullable<bool> hasLibrary, Nullable<bool> hasPlayGround, Nullable<bool> hasAthleticField, Nullable<bool> hasScienceLab, Nullable<bool> hasComputerLab, Nullable<bool> hasPool, Nullable<bool> hasCafeteria, Nullable<bool> hasMusicRoom, Nullable<bool> hasArtRoom, Nullable<bool> hasOutdoorClassroom, Nullable<bool> hasGymnasium, string other1, string other2, string other3, string handicappedAccess)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var hasAuditoriumParameter = hasAuditorium.HasValue ?
                new ObjectParameter("hasAuditorium", hasAuditorium) :
                new ObjectParameter("hasAuditorium", typeof(bool));
    
            var hasLibraryParameter = hasLibrary.HasValue ?
                new ObjectParameter("hasLibrary", hasLibrary) :
                new ObjectParameter("hasLibrary", typeof(bool));
    
            var hasPlayGroundParameter = hasPlayGround.HasValue ?
                new ObjectParameter("hasPlayGround", hasPlayGround) :
                new ObjectParameter("hasPlayGround", typeof(bool));
    
            var hasAthleticFieldParameter = hasAthleticField.HasValue ?
                new ObjectParameter("hasAthleticField", hasAthleticField) :
                new ObjectParameter("hasAthleticField", typeof(bool));
    
            var hasScienceLabParameter = hasScienceLab.HasValue ?
                new ObjectParameter("hasScienceLab", hasScienceLab) :
                new ObjectParameter("hasScienceLab", typeof(bool));
    
            var hasComputerLabParameter = hasComputerLab.HasValue ?
                new ObjectParameter("hasComputerLab", hasComputerLab) :
                new ObjectParameter("hasComputerLab", typeof(bool));
    
            var hasPoolParameter = hasPool.HasValue ?
                new ObjectParameter("hasPool", hasPool) :
                new ObjectParameter("hasPool", typeof(bool));
    
            var hasCafeteriaParameter = hasCafeteria.HasValue ?
                new ObjectParameter("hasCafeteria", hasCafeteria) :
                new ObjectParameter("hasCafeteria", typeof(bool));
    
            var hasMusicRoomParameter = hasMusicRoom.HasValue ?
                new ObjectParameter("hasMusicRoom", hasMusicRoom) :
                new ObjectParameter("hasMusicRoom", typeof(bool));
    
            var hasArtRoomParameter = hasArtRoom.HasValue ?
                new ObjectParameter("hasArtRoom", hasArtRoom) :
                new ObjectParameter("hasArtRoom", typeof(bool));
    
            var hasOutdoorClassroomParameter = hasOutdoorClassroom.HasValue ?
                new ObjectParameter("hasOutdoorClassroom", hasOutdoorClassroom) :
                new ObjectParameter("hasOutdoorClassroom", typeof(bool));
    
            var hasGymnasiumParameter = hasGymnasium.HasValue ?
                new ObjectParameter("hasGymnasium", hasGymnasium) :
                new ObjectParameter("hasGymnasium", typeof(bool));
    
            var other1Parameter = other1 != null ?
                new ObjectParameter("other1", other1) :
                new ObjectParameter("other1", typeof(string));
    
            var other2Parameter = other2 != null ?
                new ObjectParameter("other2", other2) :
                new ObjectParameter("other2", typeof(string));
    
            var other3Parameter = other3 != null ?
                new ObjectParameter("other3", other3) :
                new ObjectParameter("other3", typeof(string));
    
            var handicappedAccessParameter = handicappedAccess != null ?
                new ObjectParameter("HandicappedAccess", handicappedAccess) :
                new ObjectParameter("HandicappedAccess", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSchoolFacilities", schParameter, schyearParameter, hasAuditoriumParameter, hasLibraryParameter, hasPlayGroundParameter, hasAthleticFieldParameter, hasScienceLabParameter, hasComputerLabParameter, hasPoolParameter, hasCafeteriaParameter, hasMusicRoomParameter, hasArtRoomParameter, hasOutdoorClassroomParameter, hasGymnasiumParameter, other1Parameter, other2Parameter, other3Parameter, handicappedAccessParameter);
        }
    
        public virtual int AddSchoolHours(string sch, string schyear, string description)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSchoolHours", schParameter, schyearParameter, descriptionParameter);
        }
    
        public virtual int AddSchoolProfileLog(string sch, string userID, string message)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSchoolProfileLog", schParameter, userIDParameter, messageParameter);
        }
    
        public virtual int DeleteProfileUser(string sch, string userID)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProfileUser", schParameter, userIDParameter);
        }
    
        public virtual int DeleteSchoolDescriptions(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchoolDescriptions", schParameter, schyearParameter);
        }
    
        public virtual int DeleteSchoolFacilities(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchoolFacilities", schParameter, schyearParameter);
        }
    
        public virtual int DeleteSchoolGradeBySchYear(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchoolGradeBySchYear", schParameter, schyearParameter);
        }
    
        public virtual int DeleteSchoolHours(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchoolHours", schParameter, schyearParameter);
        }
    
        public virtual int DeleteSchoolPartners(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchoolPartners", schParameter, schyearParameter);
        }
    
        public virtual int DeleteSchoolPreviewDate(string sch, string schyear, Nullable<int> previewID)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var previewIDParameter = previewID.HasValue ?
                new ObjectParameter("PreviewID", previewID) :
                new ObjectParameter("PreviewID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchoolPreviewDate", schParameter, schyearParameter, previewIDParameter);
        }
    
        public virtual ObjectResult<GetProfileSchools_Result> GetProfileSchools()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfileSchools_Result>("GetProfileSchools");
        }
    
        public virtual ObjectResult<GetProfileUsers_Result> GetProfileUsers(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfileUsers_Result>("GetProfileUsers", userIDParameter);
        }
    
        public virtual ObjectResult<GetSchoolAwards_Result> GetSchoolAwards(string schyear, string sch, string translationLanguage)
        {
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var translationLanguageParameter = translationLanguage != null ?
                new ObjectParameter("TranslationLanguage", translationLanguage) :
                new ObjectParameter("TranslationLanguage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolAwards_Result>("GetSchoolAwards", schyearParameter, schParameter, translationLanguageParameter);
        }
    
        public virtual ObjectResult<GetSchoolCompletedInfo_Result> GetSchoolCompletedInfo(string schyear, string sch, string userID)
        {
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolCompletedInfo_Result>("GetSchoolCompletedInfo", schyearParameter, schParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetSchoolCompletedReport_Result> GetSchoolCompletedReport(string schyear)
        {
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolCompletedReport_Result>("GetSchoolCompletedReport", schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolDescriptions_Result> GetSchoolDescriptions(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolDescriptions_Result>("GetSchoolDescriptions", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolDescriptionsByTransLang_Result> GetSchoolDescriptionsByTransLang(string schyear, string sch)
        {
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolDescriptionsByTransLang_Result>("GetSchoolDescriptionsByTransLang", schyearParameter, schParameter);
        }
    
        public virtual ObjectResult<GetSchoolFacilities_Result> GetSchoolFacilities(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolFacilities_Result>("GetSchoolFacilities", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolGradeRangeBySchYear_Result> GetSchoolGradeRangeBySchYear(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolGradeRangeBySchYear_Result>("GetSchoolGradeRangeBySchYear", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolHoursSimple_Result> GetSchoolHoursSimple(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolHoursSimple_Result>("GetSchoolHoursSimple", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolInfo_Result> GetSchoolInfo(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolInfo_Result>("GetSchoolInfo", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolLanguages_Result> GetSchoolLanguages(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolLanguages_Result>("GetSchoolLanguages", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolPartners_Result> GetSchoolPartners(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolPartners_Result>("GetSchoolPartners", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolPartnersDescriptions_Result> GetSchoolPartnersDescriptions(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolPartnersDescriptions_Result>("GetSchoolPartnersDescriptions", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolPreviewDate_Result> GetSchoolPreviewDate(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolPreviewDate_Result>("GetSchoolPreviewDate", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchoolProgramCode_Result> GetSchoolProgramCode(string schYear, string sch)
        {
            var schYearParameter = schYear != null ?
                new ObjectParameter("SchYear", schYear) :
                new ObjectParameter("SchYear", typeof(string));
    
            var schParameter = sch != null ?
                new ObjectParameter("Sch", sch) :
                new ObjectParameter("Sch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolProgramCode_Result>("GetSchoolProgramCode", schYearParameter, schParameter);
        }
    
        public virtual ObjectResult<GetSchoolPrograms_Result> GetSchoolPrograms(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolPrograms_Result>("GetSchoolPrograms", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetSchools_Result> GetSchools(string schyear, string userID)
        {
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchools_Result>("GetSchools", schyearParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetSchoolSports_Result> GetSchoolSports(string sch, string schyear)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolSports_Result>("GetSchoolSports", schParameter, schyearParameter);
        }
    
        public virtual ObjectResult<GetStudentSchoolSupports_Result> GetStudentSchoolSupports(string schYear, string sch)
        {
            var schYearParameter = schYear != null ?
                new ObjectParameter("SchYear", schYear) :
                new ObjectParameter("SchYear", typeof(string));
    
            var schParameter = sch != null ?
                new ObjectParameter("Sch", sch) :
                new ObjectParameter("Sch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentSchoolSupports_Result>("GetStudentSchoolSupports", schYearParameter, schParameter);
        }
    
        public virtual int UpdateSchoolCompleted(string sch, string schyear, string userID)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolCompleted", schParameter, schyearParameter, userIDParameter);
        }
    
        public virtual int UpdateSchoolDescriptions(string sch, string schyear, string schSpecial, string schFocus, Nullable<bool> specialApp, string specialAppNarr, string uniformPolicy, string uniformPolicyDesc, string sfl1, string sfl2, string sfl3, string sfl4, string sfl5, string sfl6, string sfl7, string sfl8, string sfl9, string sfl10, string sfl11, string sfl12, string edSuccess, string makesUsSpecial, string engageFamilies, string award1, string award1PresBy, string award1Year, string award2, string award2PresBy, string award2Year, string award3, string award3PresBy, string award3Year, string award4, string award4PresBy, string award4Year, string award5, string award5PresBy, string award5Year, string award6, string award6PresBy, string award6Year, string award7, string award7PresBy, string award7Year, string award8, string award8PresBy, string award8Year, string award9, string award9PresBy, string award9Year, string award10, string award10PresBy, string award10Year)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var schSpecialParameter = schSpecial != null ?
                new ObjectParameter("schSpecial", schSpecial) :
                new ObjectParameter("schSpecial", typeof(string));
    
            var schFocusParameter = schFocus != null ?
                new ObjectParameter("schFocus", schFocus) :
                new ObjectParameter("schFocus", typeof(string));
    
            var specialAppParameter = specialApp.HasValue ?
                new ObjectParameter("specialApp", specialApp) :
                new ObjectParameter("specialApp", typeof(bool));
    
            var specialAppNarrParameter = specialAppNarr != null ?
                new ObjectParameter("specialAppNarr", specialAppNarr) :
                new ObjectParameter("specialAppNarr", typeof(string));
    
            var uniformPolicyParameter = uniformPolicy != null ?
                new ObjectParameter("uniformPolicy", uniformPolicy) :
                new ObjectParameter("uniformPolicy", typeof(string));
    
            var uniformPolicyDescParameter = uniformPolicyDesc != null ?
                new ObjectParameter("uniformPolicyDesc", uniformPolicyDesc) :
                new ObjectParameter("uniformPolicyDesc", typeof(string));
    
            var sfl1Parameter = sfl1 != null ?
                new ObjectParameter("sfl1", sfl1) :
                new ObjectParameter("sfl1", typeof(string));
    
            var sfl2Parameter = sfl2 != null ?
                new ObjectParameter("sfl2", sfl2) :
                new ObjectParameter("sfl2", typeof(string));
    
            var sfl3Parameter = sfl3 != null ?
                new ObjectParameter("sfl3", sfl3) :
                new ObjectParameter("sfl3", typeof(string));
    
            var sfl4Parameter = sfl4 != null ?
                new ObjectParameter("sfl4", sfl4) :
                new ObjectParameter("sfl4", typeof(string));
    
            var sfl5Parameter = sfl5 != null ?
                new ObjectParameter("sfl5", sfl5) :
                new ObjectParameter("sfl5", typeof(string));
    
            var sfl6Parameter = sfl6 != null ?
                new ObjectParameter("sfl6", sfl6) :
                new ObjectParameter("sfl6", typeof(string));
    
            var sfl7Parameter = sfl7 != null ?
                new ObjectParameter("sfl7", sfl7) :
                new ObjectParameter("sfl7", typeof(string));
    
            var sfl8Parameter = sfl8 != null ?
                new ObjectParameter("sfl8", sfl8) :
                new ObjectParameter("sfl8", typeof(string));
    
            var sfl9Parameter = sfl9 != null ?
                new ObjectParameter("sfl9", sfl9) :
                new ObjectParameter("sfl9", typeof(string));
    
            var sfl10Parameter = sfl10 != null ?
                new ObjectParameter("sfl10", sfl10) :
                new ObjectParameter("sfl10", typeof(string));
    
            var sfl11Parameter = sfl11 != null ?
                new ObjectParameter("sfl11", sfl11) :
                new ObjectParameter("sfl11", typeof(string));
    
            var sfl12Parameter = sfl12 != null ?
                new ObjectParameter("sfl12", sfl12) :
                new ObjectParameter("sfl12", typeof(string));
    
            var edSuccessParameter = edSuccess != null ?
                new ObjectParameter("edSuccess", edSuccess) :
                new ObjectParameter("edSuccess", typeof(string));
    
            var makesUsSpecialParameter = makesUsSpecial != null ?
                new ObjectParameter("makesUsSpecial", makesUsSpecial) :
                new ObjectParameter("makesUsSpecial", typeof(string));
    
            var engageFamiliesParameter = engageFamilies != null ?
                new ObjectParameter("engageFamilies", engageFamilies) :
                new ObjectParameter("engageFamilies", typeof(string));
    
            var award1Parameter = award1 != null ?
                new ObjectParameter("award1", award1) :
                new ObjectParameter("award1", typeof(string));
    
            var award1PresByParameter = award1PresBy != null ?
                new ObjectParameter("award1PresBy", award1PresBy) :
                new ObjectParameter("award1PresBy", typeof(string));
    
            var award1YearParameter = award1Year != null ?
                new ObjectParameter("award1Year", award1Year) :
                new ObjectParameter("award1Year", typeof(string));
    
            var award2Parameter = award2 != null ?
                new ObjectParameter("award2", award2) :
                new ObjectParameter("award2", typeof(string));
    
            var award2PresByParameter = award2PresBy != null ?
                new ObjectParameter("award2PresBy", award2PresBy) :
                new ObjectParameter("award2PresBy", typeof(string));
    
            var award2YearParameter = award2Year != null ?
                new ObjectParameter("award2Year", award2Year) :
                new ObjectParameter("award2Year", typeof(string));
    
            var award3Parameter = award3 != null ?
                new ObjectParameter("award3", award3) :
                new ObjectParameter("award3", typeof(string));
    
            var award3PresByParameter = award3PresBy != null ?
                new ObjectParameter("award3PresBy", award3PresBy) :
                new ObjectParameter("award3PresBy", typeof(string));
    
            var award3YearParameter = award3Year != null ?
                new ObjectParameter("award3Year", award3Year) :
                new ObjectParameter("award3Year", typeof(string));
    
            var award4Parameter = award4 != null ?
                new ObjectParameter("award4", award4) :
                new ObjectParameter("award4", typeof(string));
    
            var award4PresByParameter = award4PresBy != null ?
                new ObjectParameter("award4PresBy", award4PresBy) :
                new ObjectParameter("award4PresBy", typeof(string));
    
            var award4YearParameter = award4Year != null ?
                new ObjectParameter("award4Year", award4Year) :
                new ObjectParameter("award4Year", typeof(string));
    
            var award5Parameter = award5 != null ?
                new ObjectParameter("award5", award5) :
                new ObjectParameter("award5", typeof(string));
    
            var award5PresByParameter = award5PresBy != null ?
                new ObjectParameter("award5PresBy", award5PresBy) :
                new ObjectParameter("award5PresBy", typeof(string));
    
            var award5YearParameter = award5Year != null ?
                new ObjectParameter("award5Year", award5Year) :
                new ObjectParameter("award5Year", typeof(string));
    
            var award6Parameter = award6 != null ?
                new ObjectParameter("award6", award6) :
                new ObjectParameter("award6", typeof(string));
    
            var award6PresByParameter = award6PresBy != null ?
                new ObjectParameter("award6PresBy", award6PresBy) :
                new ObjectParameter("award6PresBy", typeof(string));
    
            var award6YearParameter = award6Year != null ?
                new ObjectParameter("award6Year", award6Year) :
                new ObjectParameter("award6Year", typeof(string));
    
            var award7Parameter = award7 != null ?
                new ObjectParameter("award7", award7) :
                new ObjectParameter("award7", typeof(string));
    
            var award7PresByParameter = award7PresBy != null ?
                new ObjectParameter("award7PresBy", award7PresBy) :
                new ObjectParameter("award7PresBy", typeof(string));
    
            var award7YearParameter = award7Year != null ?
                new ObjectParameter("award7Year", award7Year) :
                new ObjectParameter("award7Year", typeof(string));
    
            var award8Parameter = award8 != null ?
                new ObjectParameter("award8", award8) :
                new ObjectParameter("award8", typeof(string));
    
            var award8PresByParameter = award8PresBy != null ?
                new ObjectParameter("award8PresBy", award8PresBy) :
                new ObjectParameter("award8PresBy", typeof(string));
    
            var award8YearParameter = award8Year != null ?
                new ObjectParameter("award8Year", award8Year) :
                new ObjectParameter("award8Year", typeof(string));
    
            var award9Parameter = award9 != null ?
                new ObjectParameter("award9", award9) :
                new ObjectParameter("award9", typeof(string));
    
            var award9PresByParameter = award9PresBy != null ?
                new ObjectParameter("award9PresBy", award9PresBy) :
                new ObjectParameter("award9PresBy", typeof(string));
    
            var award9YearParameter = award9Year != null ?
                new ObjectParameter("award9Year", award9Year) :
                new ObjectParameter("award9Year", typeof(string));
    
            var award10Parameter = award10 != null ?
                new ObjectParameter("award10", award10) :
                new ObjectParameter("award10", typeof(string));
    
            var award10PresByParameter = award10PresBy != null ?
                new ObjectParameter("award10PresBy", award10PresBy) :
                new ObjectParameter("award10PresBy", typeof(string));
    
            var award10YearParameter = award10Year != null ?
                new ObjectParameter("award10Year", award10Year) :
                new ObjectParameter("award10Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolDescriptions", schParameter, schyearParameter, schSpecialParameter, schFocusParameter, specialAppParameter, specialAppNarrParameter, uniformPolicyParameter, uniformPolicyDescParameter, sfl1Parameter, sfl2Parameter, sfl3Parameter, sfl4Parameter, sfl5Parameter, sfl6Parameter, sfl7Parameter, sfl8Parameter, sfl9Parameter, sfl10Parameter, sfl11Parameter, sfl12Parameter, edSuccessParameter, makesUsSpecialParameter, engageFamiliesParameter, award1Parameter, award1PresByParameter, award1YearParameter, award2Parameter, award2PresByParameter, award2YearParameter, award3Parameter, award3PresByParameter, award3YearParameter, award4Parameter, award4PresByParameter, award4YearParameter, award5Parameter, award5PresByParameter, award5YearParameter, award6Parameter, award6PresByParameter, award6YearParameter, award7Parameter, award7PresByParameter, award7YearParameter, award8Parameter, award8PresByParameter, award8YearParameter, award9Parameter, award9PresByParameter, award9YearParameter, award10Parameter, award10PresByParameter, award10YearParameter);
        }
    
        public virtual int UpdateSchoolFacilities(string sch, string schyear, Nullable<bool> hasAuditorium, Nullable<bool> hasLibrary, Nullable<bool> hasPlayGround, Nullable<bool> hasAthleticField, Nullable<bool> hasScienceLab, Nullable<bool> hasComputerLab, Nullable<bool> hasPool, Nullable<bool> hasCafeteria, Nullable<bool> hasMusicRoom, Nullable<bool> hasArtRoom, Nullable<bool> hasOutdoorClassroom, Nullable<bool> hasGymnasium, string other1, string other2, string other3, string handicappedAccess)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var hasAuditoriumParameter = hasAuditorium.HasValue ?
                new ObjectParameter("hasAuditorium", hasAuditorium) :
                new ObjectParameter("hasAuditorium", typeof(bool));
    
            var hasLibraryParameter = hasLibrary.HasValue ?
                new ObjectParameter("hasLibrary", hasLibrary) :
                new ObjectParameter("hasLibrary", typeof(bool));
    
            var hasPlayGroundParameter = hasPlayGround.HasValue ?
                new ObjectParameter("hasPlayGround", hasPlayGround) :
                new ObjectParameter("hasPlayGround", typeof(bool));
    
            var hasAthleticFieldParameter = hasAthleticField.HasValue ?
                new ObjectParameter("hasAthleticField", hasAthleticField) :
                new ObjectParameter("hasAthleticField", typeof(bool));
    
            var hasScienceLabParameter = hasScienceLab.HasValue ?
                new ObjectParameter("hasScienceLab", hasScienceLab) :
                new ObjectParameter("hasScienceLab", typeof(bool));
    
            var hasComputerLabParameter = hasComputerLab.HasValue ?
                new ObjectParameter("hasComputerLab", hasComputerLab) :
                new ObjectParameter("hasComputerLab", typeof(bool));
    
            var hasPoolParameter = hasPool.HasValue ?
                new ObjectParameter("hasPool", hasPool) :
                new ObjectParameter("hasPool", typeof(bool));
    
            var hasCafeteriaParameter = hasCafeteria.HasValue ?
                new ObjectParameter("hasCafeteria", hasCafeteria) :
                new ObjectParameter("hasCafeteria", typeof(bool));
    
            var hasMusicRoomParameter = hasMusicRoom.HasValue ?
                new ObjectParameter("hasMusicRoom", hasMusicRoom) :
                new ObjectParameter("hasMusicRoom", typeof(bool));
    
            var hasArtRoomParameter = hasArtRoom.HasValue ?
                new ObjectParameter("hasArtRoom", hasArtRoom) :
                new ObjectParameter("hasArtRoom", typeof(bool));
    
            var hasOutdoorClassroomParameter = hasOutdoorClassroom.HasValue ?
                new ObjectParameter("hasOutdoorClassroom", hasOutdoorClassroom) :
                new ObjectParameter("hasOutdoorClassroom", typeof(bool));
    
            var hasGymnasiumParameter = hasGymnasium.HasValue ?
                new ObjectParameter("hasGymnasium", hasGymnasium) :
                new ObjectParameter("hasGymnasium", typeof(bool));
    
            var other1Parameter = other1 != null ?
                new ObjectParameter("other1", other1) :
                new ObjectParameter("other1", typeof(string));
    
            var other2Parameter = other2 != null ?
                new ObjectParameter("other2", other2) :
                new ObjectParameter("other2", typeof(string));
    
            var other3Parameter = other3 != null ?
                new ObjectParameter("other3", other3) :
                new ObjectParameter("other3", typeof(string));
    
            var handicappedAccessParameter = handicappedAccess != null ?
                new ObjectParameter("HandicappedAccess", handicappedAccess) :
                new ObjectParameter("HandicappedAccess", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolFacilities", schParameter, schyearParameter, hasAuditoriumParameter, hasLibraryParameter, hasPlayGroundParameter, hasAthleticFieldParameter, hasScienceLabParameter, hasComputerLabParameter, hasPoolParameter, hasCafeteriaParameter, hasMusicRoomParameter, hasArtRoomParameter, hasOutdoorClassroomParameter, hasGymnasiumParameter, other1Parameter, other2Parameter, other3Parameter, handicappedAccessParameter);
        }
    
        public virtual int UpdateSchoolGradeBySchYear(string sch, string schyear, string minGradeValue, string maxGradeValue)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var minGradeValueParameter = minGradeValue != null ?
                new ObjectParameter("minGradeValue", minGradeValue) :
                new ObjectParameter("minGradeValue", typeof(string));
    
            var maxGradeValueParameter = maxGradeValue != null ?
                new ObjectParameter("maxGradeValue", maxGradeValue) :
                new ObjectParameter("maxGradeValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolGradeBySchYear", schParameter, schyearParameter, minGradeValueParameter, maxGradeValueParameter);
        }
    
        public virtual int UpdateSchoolHours(string sch, string schyear, string description)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolHours", schParameter, schyearParameter, descriptionParameter);
        }
    
        public virtual int UpdateSchoolLanguages(string sch, string schyear, Nullable<bool> english, Nullable<bool> spanish, Nullable<bool> capevc, Nullable<bool> chinese, Nullable<bool> haitian, Nullable<bool> portugese, Nullable<bool> somali, Nullable<bool> vietnamese, string other1, string other2, string other3, string other4, string other5, string other6, string other7, string other8)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var englishParameter = english.HasValue ?
                new ObjectParameter("english", english) :
                new ObjectParameter("english", typeof(bool));
    
            var spanishParameter = spanish.HasValue ?
                new ObjectParameter("spanish", spanish) :
                new ObjectParameter("spanish", typeof(bool));
    
            var capevcParameter = capevc.HasValue ?
                new ObjectParameter("capevc", capevc) :
                new ObjectParameter("capevc", typeof(bool));
    
            var chineseParameter = chinese.HasValue ?
                new ObjectParameter("chinese", chinese) :
                new ObjectParameter("chinese", typeof(bool));
    
            var haitianParameter = haitian.HasValue ?
                new ObjectParameter("haitian", haitian) :
                new ObjectParameter("haitian", typeof(bool));
    
            var portugeseParameter = portugese.HasValue ?
                new ObjectParameter("portugese", portugese) :
                new ObjectParameter("portugese", typeof(bool));
    
            var somaliParameter = somali.HasValue ?
                new ObjectParameter("somali", somali) :
                new ObjectParameter("somali", typeof(bool));
    
            var vietnameseParameter = vietnamese.HasValue ?
                new ObjectParameter("vietnamese", vietnamese) :
                new ObjectParameter("vietnamese", typeof(bool));
    
            var other1Parameter = other1 != null ?
                new ObjectParameter("other1", other1) :
                new ObjectParameter("other1", typeof(string));
    
            var other2Parameter = other2 != null ?
                new ObjectParameter("other2", other2) :
                new ObjectParameter("other2", typeof(string));
    
            var other3Parameter = other3 != null ?
                new ObjectParameter("other3", other3) :
                new ObjectParameter("other3", typeof(string));
    
            var other4Parameter = other4 != null ?
                new ObjectParameter("other4", other4) :
                new ObjectParameter("other4", typeof(string));
    
            var other5Parameter = other5 != null ?
                new ObjectParameter("other5", other5) :
                new ObjectParameter("other5", typeof(string));
    
            var other6Parameter = other6 != null ?
                new ObjectParameter("other6", other6) :
                new ObjectParameter("other6", typeof(string));
    
            var other7Parameter = other7 != null ?
                new ObjectParameter("other7", other7) :
                new ObjectParameter("other7", typeof(string));
    
            var other8Parameter = other8 != null ?
                new ObjectParameter("other8", other8) :
                new ObjectParameter("other8", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolLanguages", schParameter, schyearParameter, englishParameter, spanishParameter, capevcParameter, chineseParameter, haitianParameter, portugeseParameter, somaliParameter, vietnameseParameter, other1Parameter, other2Parameter, other3Parameter, other4Parameter, other5Parameter, other6Parameter, other7Parameter, other8Parameter);
        }
    
        public virtual int UpdateSchoolPartners(string sch, string schyear, string partner1, string partner2, string partner3, string partner4, string partner5, string partner6, string partner7, string partner8, string partner9, string partner10, string classes, string beforeSchool, string afterSchool, string high1, Nullable<bool> isAfter1to5, Nullable<bool> isAfter6, Nullable<bool> isAfter7to8, Nullable<bool> isAfter9to12, Nullable<bool> isAfterK0, Nullable<bool> isAfterK1, Nullable<bool> isAfterK2, Nullable<bool> isBefore1to5, Nullable<bool> isBefore6, Nullable<bool> isBefore7to8, Nullable<bool> isBefore9to12, Nullable<bool> isBeforeK0, Nullable<bool> isBeforeK1, Nullable<bool> isBeforeK2, Nullable<bool> isExtendedDay, string schoolCapsuleType, string txtExtendedDaySchool)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var partner1Parameter = partner1 != null ?
                new ObjectParameter("partner1", partner1) :
                new ObjectParameter("partner1", typeof(string));
    
            var partner2Parameter = partner2 != null ?
                new ObjectParameter("partner2", partner2) :
                new ObjectParameter("partner2", typeof(string));
    
            var partner3Parameter = partner3 != null ?
                new ObjectParameter("partner3", partner3) :
                new ObjectParameter("partner3", typeof(string));
    
            var partner4Parameter = partner4 != null ?
                new ObjectParameter("partner4", partner4) :
                new ObjectParameter("partner4", typeof(string));
    
            var partner5Parameter = partner5 != null ?
                new ObjectParameter("partner5", partner5) :
                new ObjectParameter("partner5", typeof(string));
    
            var partner6Parameter = partner6 != null ?
                new ObjectParameter("partner6", partner6) :
                new ObjectParameter("partner6", typeof(string));
    
            var partner7Parameter = partner7 != null ?
                new ObjectParameter("partner7", partner7) :
                new ObjectParameter("partner7", typeof(string));
    
            var partner8Parameter = partner8 != null ?
                new ObjectParameter("partner8", partner8) :
                new ObjectParameter("partner8", typeof(string));
    
            var partner9Parameter = partner9 != null ?
                new ObjectParameter("partner9", partner9) :
                new ObjectParameter("partner9", typeof(string));
    
            var partner10Parameter = partner10 != null ?
                new ObjectParameter("partner10", partner10) :
                new ObjectParameter("partner10", typeof(string));
    
            var classesParameter = classes != null ?
                new ObjectParameter("classes", classes) :
                new ObjectParameter("classes", typeof(string));
    
            var beforeSchoolParameter = beforeSchool != null ?
                new ObjectParameter("beforeSchool", beforeSchool) :
                new ObjectParameter("beforeSchool", typeof(string));
    
            var afterSchoolParameter = afterSchool != null ?
                new ObjectParameter("afterSchool", afterSchool) :
                new ObjectParameter("afterSchool", typeof(string));
    
            var high1Parameter = high1 != null ?
                new ObjectParameter("high1", high1) :
                new ObjectParameter("high1", typeof(string));
    
            var isAfter1to5Parameter = isAfter1to5.HasValue ?
                new ObjectParameter("IsAfter1to5", isAfter1to5) :
                new ObjectParameter("IsAfter1to5", typeof(bool));
    
            var isAfter6Parameter = isAfter6.HasValue ?
                new ObjectParameter("IsAfter6", isAfter6) :
                new ObjectParameter("IsAfter6", typeof(bool));
    
            var isAfter7to8Parameter = isAfter7to8.HasValue ?
                new ObjectParameter("IsAfter7to8", isAfter7to8) :
                new ObjectParameter("IsAfter7to8", typeof(bool));
    
            var isAfter9to12Parameter = isAfter9to12.HasValue ?
                new ObjectParameter("IsAfter9to12", isAfter9to12) :
                new ObjectParameter("IsAfter9to12", typeof(bool));
    
            var isAfterK0Parameter = isAfterK0.HasValue ?
                new ObjectParameter("IsAfterK0", isAfterK0) :
                new ObjectParameter("IsAfterK0", typeof(bool));
    
            var isAfterK1Parameter = isAfterK1.HasValue ?
                new ObjectParameter("IsAfterK1", isAfterK1) :
                new ObjectParameter("IsAfterK1", typeof(bool));
    
            var isAfterK2Parameter = isAfterK2.HasValue ?
                new ObjectParameter("IsAfterK2", isAfterK2) :
                new ObjectParameter("IsAfterK2", typeof(bool));
    
            var isBefore1to5Parameter = isBefore1to5.HasValue ?
                new ObjectParameter("IsBefore1to5", isBefore1to5) :
                new ObjectParameter("IsBefore1to5", typeof(bool));
    
            var isBefore6Parameter = isBefore6.HasValue ?
                new ObjectParameter("IsBefore6", isBefore6) :
                new ObjectParameter("IsBefore6", typeof(bool));
    
            var isBefore7to8Parameter = isBefore7to8.HasValue ?
                new ObjectParameter("IsBefore7to8", isBefore7to8) :
                new ObjectParameter("IsBefore7to8", typeof(bool));
    
            var isBefore9to12Parameter = isBefore9to12.HasValue ?
                new ObjectParameter("IsBefore9to12", isBefore9to12) :
                new ObjectParameter("IsBefore9to12", typeof(bool));
    
            var isBeforeK0Parameter = isBeforeK0.HasValue ?
                new ObjectParameter("IsBeforeK0", isBeforeK0) :
                new ObjectParameter("IsBeforeK0", typeof(bool));
    
            var isBeforeK1Parameter = isBeforeK1.HasValue ?
                new ObjectParameter("IsBeforeK1", isBeforeK1) :
                new ObjectParameter("IsBeforeK1", typeof(bool));
    
            var isBeforeK2Parameter = isBeforeK2.HasValue ?
                new ObjectParameter("IsBeforeK2", isBeforeK2) :
                new ObjectParameter("IsBeforeK2", typeof(bool));
    
            var isExtendedDayParameter = isExtendedDay.HasValue ?
                new ObjectParameter("IsExtendedDay", isExtendedDay) :
                new ObjectParameter("IsExtendedDay", typeof(bool));
    
            var schoolCapsuleTypeParameter = schoolCapsuleType != null ?
                new ObjectParameter("SchoolCapsuleType", schoolCapsuleType) :
                new ObjectParameter("SchoolCapsuleType", typeof(string));
    
            var txtExtendedDaySchoolParameter = txtExtendedDaySchool != null ?
                new ObjectParameter("TxtExtendedDaySchool", txtExtendedDaySchool) :
                new ObjectParameter("TxtExtendedDaySchool", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolPartners", schParameter, schyearParameter, partner1Parameter, partner2Parameter, partner3Parameter, partner4Parameter, partner5Parameter, partner6Parameter, partner7Parameter, partner8Parameter, partner9Parameter, partner10Parameter, classesParameter, beforeSchoolParameter, afterSchoolParameter, high1Parameter, isAfter1to5Parameter, isAfter6Parameter, isAfter7to8Parameter, isAfter9to12Parameter, isAfterK0Parameter, isAfterK1Parameter, isAfterK2Parameter, isBefore1to5Parameter, isBefore6Parameter, isBefore7to8Parameter, isBefore9to12Parameter, isBeforeK0Parameter, isBeforeK1Parameter, isBeforeK2Parameter, isExtendedDayParameter, schoolCapsuleTypeParameter, txtExtendedDaySchoolParameter);
        }
    
        public virtual int UpdateSchoolPreviewDate(string sch, string schyear, string previewDate1, string previewDate2, string previewDate3, string previewDate4, string previewDate5, string previewDate6)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var previewDate1Parameter = previewDate1 != null ?
                new ObjectParameter("PreviewDate1", previewDate1) :
                new ObjectParameter("PreviewDate1", typeof(string));
    
            var previewDate2Parameter = previewDate2 != null ?
                new ObjectParameter("PreviewDate2", previewDate2) :
                new ObjectParameter("PreviewDate2", typeof(string));
    
            var previewDate3Parameter = previewDate3 != null ?
                new ObjectParameter("PreviewDate3", previewDate3) :
                new ObjectParameter("PreviewDate3", typeof(string));
    
            var previewDate4Parameter = previewDate4 != null ?
                new ObjectParameter("PreviewDate4", previewDate4) :
                new ObjectParameter("PreviewDate4", typeof(string));
    
            var previewDate5Parameter = previewDate5 != null ?
                new ObjectParameter("PreviewDate5", previewDate5) :
                new ObjectParameter("PreviewDate5", typeof(string));
    
            var previewDate6Parameter = previewDate6 != null ?
                new ObjectParameter("PreviewDate6", previewDate6) :
                new ObjectParameter("PreviewDate6", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolPreviewDate", schParameter, schyearParameter, previewDate1Parameter, previewDate2Parameter, previewDate3Parameter, previewDate4Parameter, previewDate5Parameter, previewDate6Parameter);
        }
    
        public virtual int UpdateSchoolPrograms(string schYear, string sch, Nullable<bool> hasInclusion, Nullable<bool> hasDualLangauge, Nullable<bool> hasWorldLangauge, Nullable<bool> hasIntnlBaccalr, Nullable<bool> hasAdvancedPlacement, Nullable<bool> hasDualEnroll, Nullable<bool> hasInternship, Nullable<bool> hasSTEM, Nullable<bool> hasSTEAM, Nullable<bool> hasVocational, Nullable<bool> hasTechFocus, Nullable<bool> hasHealth, Nullable<bool> hasArts, Nullable<bool> hasPhysicalEd)
        {
            var schYearParameter = schYear != null ?
                new ObjectParameter("SchYear", schYear) :
                new ObjectParameter("SchYear", typeof(string));
    
            var schParameter = sch != null ?
                new ObjectParameter("Sch", sch) :
                new ObjectParameter("Sch", typeof(string));
    
            var hasInclusionParameter = hasInclusion.HasValue ?
                new ObjectParameter("HasInclusion", hasInclusion) :
                new ObjectParameter("HasInclusion", typeof(bool));
    
            var hasDualLangaugeParameter = hasDualLangauge.HasValue ?
                new ObjectParameter("HasDualLangauge", hasDualLangauge) :
                new ObjectParameter("HasDualLangauge", typeof(bool));
    
            var hasWorldLangaugeParameter = hasWorldLangauge.HasValue ?
                new ObjectParameter("HasWorldLangauge", hasWorldLangauge) :
                new ObjectParameter("HasWorldLangauge", typeof(bool));
    
            var hasIntnlBaccalrParameter = hasIntnlBaccalr.HasValue ?
                new ObjectParameter("HasIntnlBaccalr", hasIntnlBaccalr) :
                new ObjectParameter("HasIntnlBaccalr", typeof(bool));
    
            var hasAdvancedPlacementParameter = hasAdvancedPlacement.HasValue ?
                new ObjectParameter("HasAdvancedPlacement", hasAdvancedPlacement) :
                new ObjectParameter("HasAdvancedPlacement", typeof(bool));
    
            var hasDualEnrollParameter = hasDualEnroll.HasValue ?
                new ObjectParameter("HasDualEnroll", hasDualEnroll) :
                new ObjectParameter("HasDualEnroll", typeof(bool));
    
            var hasInternshipParameter = hasInternship.HasValue ?
                new ObjectParameter("HasInternship", hasInternship) :
                new ObjectParameter("HasInternship", typeof(bool));
    
            var hasSTEMParameter = hasSTEM.HasValue ?
                new ObjectParameter("HasSTEM", hasSTEM) :
                new ObjectParameter("HasSTEM", typeof(bool));
    
            var hasSTEAMParameter = hasSTEAM.HasValue ?
                new ObjectParameter("HasSTEAM", hasSTEAM) :
                new ObjectParameter("HasSTEAM", typeof(bool));
    
            var hasVocationalParameter = hasVocational.HasValue ?
                new ObjectParameter("HasVocational", hasVocational) :
                new ObjectParameter("HasVocational", typeof(bool));
    
            var hasTechFocusParameter = hasTechFocus.HasValue ?
                new ObjectParameter("HasTechFocus", hasTechFocus) :
                new ObjectParameter("HasTechFocus", typeof(bool));
    
            var hasHealthParameter = hasHealth.HasValue ?
                new ObjectParameter("HasHealth", hasHealth) :
                new ObjectParameter("HasHealth", typeof(bool));
    
            var hasArtsParameter = hasArts.HasValue ?
                new ObjectParameter("HasArts", hasArts) :
                new ObjectParameter("HasArts", typeof(bool));
    
            var hasPhysicalEdParameter = hasPhysicalEd.HasValue ?
                new ObjectParameter("HasPhysicalEd", hasPhysicalEd) :
                new ObjectParameter("HasPhysicalEd", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolPrograms", schYearParameter, schParameter, hasInclusionParameter, hasDualLangaugeParameter, hasWorldLangaugeParameter, hasIntnlBaccalrParameter, hasAdvancedPlacementParameter, hasDualEnrollParameter, hasInternshipParameter, hasSTEMParameter, hasSTEAMParameter, hasVocationalParameter, hasTechFocusParameter, hasHealthParameter, hasArtsParameter, hasPhysicalEdParameter);
        }
    
        public virtual int UpdateSchoolSports(string sch, string schyear, Nullable<bool> baseball, Nullable<bool> softball, Nullable<bool> boyBasketball, Nullable<bool> girlBasketball, Nullable<bool> football, Nullable<bool> hockey, Nullable<bool> wrestling, Nullable<bool> boyVolleyball, Nullable<bool> girlVolleyball, Nullable<bool> golf, Nullable<bool> cheer, Nullable<bool> boyIndoorTrack, Nullable<bool> girlIndoorTrack, Nullable<bool> boyOutdoorTrack, Nullable<bool> girlOutdoorTrack, Nullable<bool> boyCrossCountry, Nullable<bool> girlCrossCountry, Nullable<bool> boySoccer, Nullable<bool> girlSoccer, Nullable<bool> boyTennis, Nullable<bool> girlTennis, Nullable<bool> boySwim, Nullable<bool> girlSwim, Nullable<bool> boyDoubleDutch, Nullable<bool> girlDoubleDutch, string other1, string other2, string other3, string other4, string other5)
        {
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var schyearParameter = schyear != null ?
                new ObjectParameter("schyear", schyear) :
                new ObjectParameter("schyear", typeof(string));
    
            var baseballParameter = baseball.HasValue ?
                new ObjectParameter("baseball", baseball) :
                new ObjectParameter("baseball", typeof(bool));
    
            var softballParameter = softball.HasValue ?
                new ObjectParameter("softball", softball) :
                new ObjectParameter("softball", typeof(bool));
    
            var boyBasketballParameter = boyBasketball.HasValue ?
                new ObjectParameter("boyBasketball", boyBasketball) :
                new ObjectParameter("boyBasketball", typeof(bool));
    
            var girlBasketballParameter = girlBasketball.HasValue ?
                new ObjectParameter("girlBasketball", girlBasketball) :
                new ObjectParameter("girlBasketball", typeof(bool));
    
            var footballParameter = football.HasValue ?
                new ObjectParameter("football", football) :
                new ObjectParameter("football", typeof(bool));
    
            var hockeyParameter = hockey.HasValue ?
                new ObjectParameter("hockey", hockey) :
                new ObjectParameter("hockey", typeof(bool));
    
            var wrestlingParameter = wrestling.HasValue ?
                new ObjectParameter("wrestling", wrestling) :
                new ObjectParameter("wrestling", typeof(bool));
    
            var boyVolleyballParameter = boyVolleyball.HasValue ?
                new ObjectParameter("boyVolleyball", boyVolleyball) :
                new ObjectParameter("boyVolleyball", typeof(bool));
    
            var girlVolleyballParameter = girlVolleyball.HasValue ?
                new ObjectParameter("girlVolleyball", girlVolleyball) :
                new ObjectParameter("girlVolleyball", typeof(bool));
    
            var golfParameter = golf.HasValue ?
                new ObjectParameter("golf", golf) :
                new ObjectParameter("golf", typeof(bool));
    
            var cheerParameter = cheer.HasValue ?
                new ObjectParameter("cheer", cheer) :
                new ObjectParameter("cheer", typeof(bool));
    
            var boyIndoorTrackParameter = boyIndoorTrack.HasValue ?
                new ObjectParameter("boyIndoorTrack", boyIndoorTrack) :
                new ObjectParameter("boyIndoorTrack", typeof(bool));
    
            var girlIndoorTrackParameter = girlIndoorTrack.HasValue ?
                new ObjectParameter("girlIndoorTrack", girlIndoorTrack) :
                new ObjectParameter("girlIndoorTrack", typeof(bool));
    
            var boyOutdoorTrackParameter = boyOutdoorTrack.HasValue ?
                new ObjectParameter("boyOutdoorTrack", boyOutdoorTrack) :
                new ObjectParameter("boyOutdoorTrack", typeof(bool));
    
            var girlOutdoorTrackParameter = girlOutdoorTrack.HasValue ?
                new ObjectParameter("girlOutdoorTrack", girlOutdoorTrack) :
                new ObjectParameter("girlOutdoorTrack", typeof(bool));
    
            var boyCrossCountryParameter = boyCrossCountry.HasValue ?
                new ObjectParameter("boyCrossCountry", boyCrossCountry) :
                new ObjectParameter("boyCrossCountry", typeof(bool));
    
            var girlCrossCountryParameter = girlCrossCountry.HasValue ?
                new ObjectParameter("girlCrossCountry", girlCrossCountry) :
                new ObjectParameter("girlCrossCountry", typeof(bool));
    
            var boySoccerParameter = boySoccer.HasValue ?
                new ObjectParameter("boySoccer", boySoccer) :
                new ObjectParameter("boySoccer", typeof(bool));
    
            var girlSoccerParameter = girlSoccer.HasValue ?
                new ObjectParameter("girlSoccer", girlSoccer) :
                new ObjectParameter("girlSoccer", typeof(bool));
    
            var boyTennisParameter = boyTennis.HasValue ?
                new ObjectParameter("boyTennis", boyTennis) :
                new ObjectParameter("boyTennis", typeof(bool));
    
            var girlTennisParameter = girlTennis.HasValue ?
                new ObjectParameter("girlTennis", girlTennis) :
                new ObjectParameter("girlTennis", typeof(bool));
    
            var boySwimParameter = boySwim.HasValue ?
                new ObjectParameter("boySwim", boySwim) :
                new ObjectParameter("boySwim", typeof(bool));
    
            var girlSwimParameter = girlSwim.HasValue ?
                new ObjectParameter("girlSwim", girlSwim) :
                new ObjectParameter("girlSwim", typeof(bool));
    
            var boyDoubleDutchParameter = boyDoubleDutch.HasValue ?
                new ObjectParameter("boyDoubleDutch", boyDoubleDutch) :
                new ObjectParameter("boyDoubleDutch", typeof(bool));
    
            var girlDoubleDutchParameter = girlDoubleDutch.HasValue ?
                new ObjectParameter("girlDoubleDutch", girlDoubleDutch) :
                new ObjectParameter("girlDoubleDutch", typeof(bool));
    
            var other1Parameter = other1 != null ?
                new ObjectParameter("other1", other1) :
                new ObjectParameter("other1", typeof(string));
    
            var other2Parameter = other2 != null ?
                new ObjectParameter("other2", other2) :
                new ObjectParameter("other2", typeof(string));
    
            var other3Parameter = other3 != null ?
                new ObjectParameter("other3", other3) :
                new ObjectParameter("other3", typeof(string));
    
            var other4Parameter = other4 != null ?
                new ObjectParameter("other4", other4) :
                new ObjectParameter("other4", typeof(string));
    
            var other5Parameter = other5 != null ?
                new ObjectParameter("other5", other5) :
                new ObjectParameter("other5", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchoolSports", schParameter, schyearParameter, baseballParameter, softballParameter, boyBasketballParameter, girlBasketballParameter, footballParameter, hockeyParameter, wrestlingParameter, boyVolleyballParameter, girlVolleyballParameter, golfParameter, cheerParameter, boyIndoorTrackParameter, girlIndoorTrackParameter, boyOutdoorTrackParameter, girlOutdoorTrackParameter, boyCrossCountryParameter, girlCrossCountryParameter, boySoccerParameter, girlSoccerParameter, boyTennisParameter, girlTennisParameter, boySwimParameter, girlSwimParameter, boyDoubleDutchParameter, girlDoubleDutchParameter, other1Parameter, other2Parameter, other3Parameter, other4Parameter, other5Parameter);
        }
    
        public virtual int UpdateStudentSupports(string schYear, string sch, Nullable<bool> hasFullTimeNurse, Nullable<bool> hasPartTimeNurse, Nullable<bool> hasFamilyCoord, Nullable<bool> hasSocialWorker, Nullable<bool> hasGuidanceCoord, Nullable<bool> hasOnlineHealthCntr)
        {
            var schYearParameter = schYear != null ?
                new ObjectParameter("SchYear", schYear) :
                new ObjectParameter("SchYear", typeof(string));
    
            var schParameter = sch != null ?
                new ObjectParameter("Sch", sch) :
                new ObjectParameter("Sch", typeof(string));
    
            var hasFullTimeNurseParameter = hasFullTimeNurse.HasValue ?
                new ObjectParameter("HasFullTimeNurse", hasFullTimeNurse) :
                new ObjectParameter("HasFullTimeNurse", typeof(bool));
    
            var hasPartTimeNurseParameter = hasPartTimeNurse.HasValue ?
                new ObjectParameter("HasPartTimeNurse", hasPartTimeNurse) :
                new ObjectParameter("HasPartTimeNurse", typeof(bool));
    
            var hasFamilyCoordParameter = hasFamilyCoord.HasValue ?
                new ObjectParameter("HasFamilyCoord", hasFamilyCoord) :
                new ObjectParameter("HasFamilyCoord", typeof(bool));
    
            var hasSocialWorkerParameter = hasSocialWorker.HasValue ?
                new ObjectParameter("HasSocialWorker", hasSocialWorker) :
                new ObjectParameter("HasSocialWorker", typeof(bool));
    
            var hasGuidanceCoordParameter = hasGuidanceCoord.HasValue ?
                new ObjectParameter("HasGuidanceCoord", hasGuidanceCoord) :
                new ObjectParameter("HasGuidanceCoord", typeof(bool));
    
            var hasOnlineHealthCntrParameter = hasOnlineHealthCntr.HasValue ?
                new ObjectParameter("HasOnlineHealthCntr", hasOnlineHealthCntr) :
                new ObjectParameter("HasOnlineHealthCntr", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentSupports", schYearParameter, schParameter, hasFullTimeNurseParameter, hasPartTimeNurseParameter, hasFamilyCoordParameter, hasSocialWorkerParameter, hasGuidanceCoordParameter, hasOnlineHealthCntrParameter);
        }
    
        public virtual ObjectResult<DetermineTransEligibilityByAddressID_Result> DetermineTransEligibilityByAddressID(string schYearParam, Nullable<int> addressID, string sch, string grade, string sEICode, string zipCode)
        {
            var schYearParamParameter = schYearParam != null ?
                new ObjectParameter("SchYearParam", schYearParam) :
                new ObjectParameter("SchYearParam", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var schParameter = sch != null ?
                new ObjectParameter("sch", sch) :
                new ObjectParameter("sch", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var sEICodeParameter = sEICode != null ?
                new ObjectParameter("SEICode", sEICode) :
                new ObjectParameter("SEICode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DetermineTransEligibilityByAddressID_Result>("DetermineTransEligibilityByAddressID", schYearParamParameter, addressIDParameter, schParameter, gradeParameter, sEICodeParameter, zipCodeParameter);
        }
    }
}
